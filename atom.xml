<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yuanmxc.site</id>
    <title>陌上尘归处</title>
    <subtitle>人生无根蒂，飘如陌上尘</subtitle>
    <icon>http://yuanmxc.site/images/favicon.ico</icon>
    <link href="http://yuanmxc.site" />
    <author>
      <name>陌上尘</name>
    </author>
    <updated>2024-03-26T12:51:51.467Z</updated>
    <entry>
        <id>http://yuanmxc.site/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9A%8F%E7%AC%94/</id>
        <title>第一次随笔</title>
        <link rel="alternate" href="http://yuanmxc.site/%E9%9A%8F%E7%AC%94/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9A%8F%E7%AC%94/"/>
        <content type="html">&lt;h1 id=&#34;起因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#起因&#34;&gt;#&lt;/a&gt; 起因&lt;/h1&gt;
&lt;p&gt;3.25 晚上整理博客，QQ 上看到一段话，还不错，正好博客弄好了，” 关于 “这部分还不知道放些什么东西。随笔这些写上面感觉还不错，于是开始在博客上写随笔。但是敲来敲去，总觉得哪里有些怪，不自然。看着屏幕上写的东西，总感觉有那么一丝丝奇怪。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逃避&lt;/strong&gt; — 差不多就是这样。选择困难症又开始了，博客上要不要 &amp;quot;记录生活&amp;quot;，写写随笔，还是只写技术，写随笔写什么，怎么写。&lt;/p&gt;
&lt;h1 id=&#34;高中旧物&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高中旧物&#34;&gt;#&lt;/a&gt; 高中旧物&lt;/h1&gt;
&lt;p&gt;初中高中的时候也有写过一些记录当时所思所想的文字，尤其是高三压力大那时候，晚上猫在被窝打灯写，虽然大部分是和 ys 有关，但是也包含了自己当时的所思所想，也给了自己不少坚持下去的动力。&lt;/p&gt;
&lt;p&gt;但毕业以后，人生开始踏入新的阶段，整理之前的旧物时又开始选择。那时的自己喜欢简约，什么东西都整整齐齐，有条理，同时也不想无关的东西来占用自己的空间和时间。” 断舍离 “践行的很好，包括现在也是。&lt;/p&gt;
&lt;p&gt;“长时间用不到的东西扔掉就好了，即使未来某一天想用到它，也就是那么很短的一段时间。想回忆的时候感触万千，但部分时间他们都是无用之物 “。就是这种想法。我现在也觉得没错。三年过去，对于那些记录，也就现在有那么一点” 如果没有扔掉，现在看看也不不错 “的想法，其他时间根本就没想。&lt;/p&gt;
&lt;h1 id=&#34;写吧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写吧&#34;&gt;#&lt;/a&gt; 写吧&lt;/h1&gt;
&lt;p&gt;写随笔在自己看来其实一件很好的事情，鼓励自己，反省自己，记录生活，，但是 “有写他们的时间我为什么不去做些其他的事情呢” 这种想法总会占据上风。事实也确实如此，比如现在写这篇文章就要花不少时间。&lt;/p&gt;
&lt;p&gt;正在纠结的时候学弟过来给我看了他昨晚写的博客，也是随笔，简单的记录生活，简单的排版，简单的描述，看着还不错，是自己犹犹豫豫不敢写的东西。&lt;/p&gt;
&lt;p&gt;看完后又去看了一下他的友链中一个人的博客。是 23 届一个学前端的女生，写了几篇博客记录自己的生活，文笔也不错，写的很好，一连看了几篇，虽然所有图片都无法查看（应该是图床没配好）但是让我看的心情变得不错。也下定决心开是写些东西。&lt;/p&gt;
&lt;h1 id=&#34;后谈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后谈&#34;&gt;#&lt;/a&gt; 后谈&lt;/h1&gt;
&lt;p&gt;其实写这些花费时间是肯定的，但不一定就是” 浪费 “，写或者不写而引发的一系列反应会导致什么结果。写了这些可能让自己心情变好？影响学习效率？影响心态？时间总是要花费的，无非就是这段时间花费是不是花在你想做的事情上。如果写随笔是想做的事情，那也就是不用犹豫了。&lt;/p&gt;
&lt;p&gt;以后有时间，想写了就写一些，随时、随地、随便。也不用太在乎排版啊，观感啊这些。始终觉得写东西首先是给自己看的，其次才是给别人看。&lt;/p&gt;
&lt;p&gt;修博客的时候不知道写什么话放在首页好，后来发现自己用了很久的 QQ 签名不就很不错嘛：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不乱于心，不困于情；不畏将来，不念过往。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是丰子恺先生写的。顺带查了一下，这句话是丰子恺先生《无宠不惊过一生》的一句诗。&lt;/p&gt;
&lt;p&gt;全诗如下：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;不乱于心，不困于情；不畏将来，不念过往。如此，安好！&lt;/em&gt;&lt;br /&gt;
&lt;em&gt; 深谋若谷，深交若水；深明大义，深悉小节，已然，静舒！&lt;/em&gt;&lt;br /&gt;
&lt;em&gt; 善宽以怀，善感以恩；善博以浪，善精以业。这般。最佳！&lt;/em&gt;&lt;br /&gt;
&lt;em&gt; 勿感于时，勿伤于怀；勿耽美色，勿沉虚妄。从今，进取！&lt;/em&gt;&lt;br /&gt;
&lt;em&gt; 无愧于天，无愧于地。无怍于人，无惧于鬼。这样。人生！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;写的是真不错啊。记下记下，后面还想开一些好词、好句之类的地方，收藏一下，初高中的东西都丢了，那时候因为要写作文，” 顺带 “收集了不少自己觉得不错的好词、好诗、好句，可惜都遗失了，不过现在开始，慢慢找回来吧。&lt;/p&gt;
&lt;p&gt;打字打的手疼，好像还没一次性连续打这么多字。估计还有很多错字，已经不想再检查了，今天先到这里吧。&lt;/p&gt;
&lt;p&gt;下面是那天晚上写的东西，也就先这么放着：&lt;/p&gt;
&lt;p&gt;也不知道这里该写些什么，感觉有很多想写的，又感觉没什么写的。就瞎写得了，随性一点也不错。想起啥写啥。“以后会优化”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三年后，你结婚了，下班回家看着你不爱的人，烦得吃不下饭，床都不愿意上，话也不想说，你会不会后悔曾经太听家人的话；&lt;/p&gt;
&lt;p&gt;三年后，你结婚了，下班回家看着你当初奋不顾身要嫁的人，对你很是厌烦，只知道打游戏，话都懒得跟你说，再看看满屋的狼藉，吵闹的孩子，没洗的碗筷，他甚至家都不愿意回，你会不会后悔曾经不听家人的话；&lt;/p&gt;
&lt;p&gt;三年后，你未婚，看见朋友都幸福美满，你流露出羡慕的眼神，可又看到他们为了房贷，车贷，孩子的费用，柴米油盐的平淡和枯燥锁纠缠，你庆幸自由且随意；&lt;/p&gt;
&lt;p&gt;三年后，你仍没有结婚，看到别人家烟花满巷，内心的孤独和失落油然而生，对未来的迷茫无从安放。那一刻你会不会觉得自己是芸芸众生中最普通的一员，你是否会后悔当初决定不结婚；&lt;/p&gt;
&lt;p&gt;巷子里的猫很自由，却没有归宿，围墙里的狗有归宿，终身都得低头，人生这道选择题，怎么选都会有遗憾，人总以为自己没有过的路上开满了鲜花，凡事看的太透，人间便无趣了，该来的都回来，该走的也都会走。别抗拒，别挽留，太注重细节的人注定不会快乐。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;QQ 看点偶然看到的。例子终究是例子，你自己的生活什么样不是别人说出来的。有人陪或者三年后自己差不多也该到结婚的时候了吧，人生即将打下一个基调。婚可能还是要结的，孩子可能还是要要的，自己的想法应该还没到扭转这个路线的能力？决心？自己也说不清。“传统路线” 还是自由选择，就交给将来的自己去抉择把。至少现在觉得养孩子，还贷还不是自己想要的生活。不喜欢背负着太多压力，不喜欢没有选择，不喜欢” 不得不 “，喜欢” 所做的一切都是因为自己原意去做，想去做，想去过什么生活，想成为什么样的人 “。未来的事情交给未来就好了，未来总会成为现在的。&lt;/p&gt;
&lt;p&gt;最后几句话和前面关系不大吧。“凡事看的太透，人间便无趣了” 这话怎么感觉说的这么像自己的状态。很多事情都没什么大兴趣，“无所谓”“都行”。&lt;/p&gt;
&lt;p&gt;有些后悔初中高中写的东西没保存了，高三末写的那个本子啊，就，之前的心态好想是对过去的没什么可留恋的。&lt;/p&gt;
</content>
        <category term="随笔" scheme="http://yuanmxc.site/categories/essay/" />
        <updated>2024-03-26T12:51:51.467Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/Archlinux/ArchLinux%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
        <title>ArchLinux使用记录</title>
        <link rel="alternate" href="http://yuanmxc.site/Archlinux/ArchLinux%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
        <content type="html">&lt;h2 id=&#34;零&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#零&#34;&gt;#&lt;/a&gt; 零&lt;/h2&gt;
&lt;p&gt;强烈推荐阅读：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNobGludXhzdHVkaW8uZ2l0aHViLmlvL0FyY2hMaW51eFR1dG9yaWFsLyMvP2lkPWFyY2gtbGludXgtJUU1JUFFJTg5JUU4JUEzJTg1JUU0JUJEJUJGJUU3JTk0JUE4JUU2JTk1JTk5JUU3JUE4JThCLWFyY2h0dXRvcmlhbC1hcmNoLWxpbnV4LXN0dWRpbw==&#34;&gt;Arch Linux 安装使用教程&lt;/span&gt; 和 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNobGludXhzdHVkaW8uZ2l0aHViLmlvL0FyY2hMaW51eFR1dG9yaWFsLyMvP2lkPWFyY2gtbGludXgtJUU1JUFFJTg5JUU4JUEzJTg1JUU0JUJEJUJGJUU3JTk0JUE4JUU2JTk1JTk5JUU3JUE4JThCLWFyY2h0dXRvcmlhbC1hcmNoLWxpbnV4LXN0dWRpbw==&#34;&gt;archlinux 简明指南&lt;/span&gt; 。 这两本书都是内容非常详尽的 Arch Linux 安装和使用教程，包括 Arch Linux 安装、基本配置、日产使用、常用软件安装等内容，可以帮助初学者解决很多问题。&lt;/p&gt;
&lt;p&gt;笔者本人使用笔记本单固态应硬盘安装 windows10 + ArchLinux 双系统，推荐按照 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNobGludXhzdHVkaW8uZ2l0aHViLmlvL0FyY2hMaW51eFR1dG9yaWFsLyMvP2lkPWFyY2gtbGludXgtJUU1JUFFJTg5JUU4JUEzJTg1JUU0JUJEJUJGJUU3JTk0JUE4JUU2JTk1JTk5JUU3JUE4JThCLWFyY2h0dXRvcmlhbC1hcmNoLWxpbnV4LXN0dWRpbw==&#34;&gt;archlinux 简明指南&lt;/span&gt; 的安装步骤进行安装。&lt;/p&gt;
&lt;p&gt;安装过程需要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;清楚你即将使用的命令做了什么，不要一味回车回车...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按照教程的大纲，分模块进行，分清每一块做了什么，不要一行一行，遇见一个敲一个，先通读知晓这一块是做什么之后，返回来按照自己需要的去做。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要过分地 “多线程” 操作试图节省时间，稳中前进，不出错就是最快的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;仔细对照好输入的命令是否正确，确认每个命令的结果是否符合预期。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYnMuYXJjaGxpbnV4Y24ub3JnL2luZGV4LnBocA==&#34;&gt;Arclinux 中文论坛&lt;/span&gt; 众多 Archlinux 使用者汇集的地方，同时有着较为官方的信息和软件包，很多问题可以在这里解决。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;部分命令记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部分命令记录&#34;&gt;#&lt;/a&gt; 部分命令记录&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fdisk&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-l&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 查看磁盘和分区信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;df-h &lt;span class=&#34;token comment&#34;&gt;# 显示文件系统磁盘空间使用情况&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;umount&lt;/span&gt; /dev/sdX &lt;span class=&#34;token comment&#34;&gt;# 卸载 U 盘，“/dev/sdX” 为你要卸载的 U 盘设备名称。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; mkfs.vfat /dev/sdX &lt;span class=&#34;token comment&#34;&gt;# 将 U 盘格式化为 FAT32 文件系统 /&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printenv&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 查看所有的环境变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 查看特定环境变量的值（echo $http_proxy）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;http_proxy&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;http://127.0.0.1:7890&#34;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 设置代理服务器，设置 http_proxy 和 https_proxy 环境变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;https_proxy&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;http://127.0.0.1:7890&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以下命令需要安装后才能使用：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tree &lt;span class=&#34;token parameter variable&#34;&gt;-A&lt;/span&gt; 使用ASNI绘图字符显示树状图而非以ASCII字符组合&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token parameter variable&#34;&gt;-C&lt;/span&gt; 使用颜色区分文件类型&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token parameter variable&#34;&gt;-N&lt;/span&gt; 支持显示中文字符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt; 显示隐藏文件&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;以.开头&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; 只显示目录&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token parameter variable&#34;&gt;-h&lt;/span&gt; 使用人易读的单位显示文件大小&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token parameter variable&#34;&gt;-L&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 指定显示的最大深度&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;##Pacman 包管理：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Syu&lt;/span&gt;                &lt;span class=&#34;token comment&#34;&gt;# 升级系统&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; package_name     &lt;span class=&#34;token comment&#34;&gt;# 安装软件包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Syu&lt;/span&gt; package_name   &lt;span class=&#34;token comment&#34;&gt;# 升级系统并安装软件包，ArchLinux 不支持部分升级，建议用此命令先升级再安装&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Syyu&lt;/span&gt;               &lt;span class=&#34;token comment&#34;&gt;# 升级系统 yy 标记强制刷新 u 标记升级动作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Ss&lt;/span&gt; package_name    &lt;span class=&#34;token comment&#34;&gt;# 搜索包含相关内容的软件包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-R&lt;/span&gt; package_name     &lt;span class=&#34;token comment&#34;&gt;# 删除软件包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Qi&lt;/span&gt; package_name    &lt;span class=&#34;token comment&#34;&gt;# 查看软件包信息     &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Q&lt;/span&gt;                  &lt;span class=&#34;token comment&#34;&gt;# 查看安装的软件包      &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Rs&lt;/span&gt; package_name    &lt;span class=&#34;token comment&#34;&gt;# 删除软件包，及其所有没有被其他已安装软件包使用的依赖包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Si&lt;/span&gt; package_name    &lt;span class=&#34;token comment&#34;&gt;# 从数据库中搜索软件包的信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Qdt&lt;/span&gt;                &lt;span class=&#34;token comment&#34;&gt;# 找出孤立包 Q 为查询本地软件包数据库 d 标记依赖包 t 标记不需要的包 dt 合并标记孤立包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Rs&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Qtdq&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 删除孤立软件包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-U&lt;/span&gt; abc.pkg.tar.gz   &lt;span class=&#34;token comment&#34;&gt;# 安装下载的 abc 包，或新编译的本地 abc 包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Fy&lt;/span&gt;                 &lt;span class=&#34;token comment&#34;&gt;# 更新命令查询文件列表数据库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-F&lt;/span&gt; xxx              &lt;span class=&#34;token comment&#34;&gt;# 当不知道某个命令属于哪个包时，用来查询某个 xxx 命令属于哪个包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Sc&lt;/span&gt;                 &lt;span class=&#34;token comment&#34;&gt;# 清理没有安装的所有缓存包，和没有被使用的同步数据库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yay &lt;span class=&#34;token parameter variable&#34;&gt;-Syu&lt;/span&gt;                        &lt;span class=&#34;token comment&#34;&gt;# 升级官方和 AUR 的软件包，包括 pacman, -syyu 强制升级&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yay &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; abc                      &lt;span class=&#34;token comment&#34;&gt;# 安装 abc 包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yay &lt;span class=&#34;token parameter variable&#34;&gt;-Ss&lt;/span&gt; abc &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; 已安装        &lt;span class=&#34;token comment&#34;&gt;# 搜索已安装且包含 abc 的包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yay &lt;span class=&#34;token parameter variable&#34;&gt;-R&lt;/span&gt; 包名                      &lt;span class=&#34;token comment&#34;&gt;# 删除软件包 (不包括前后缀，版本号)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; /var/lib/pacman/db.lck  &lt;span class=&#34;token comment&#34;&gt;# 删除 /var/lib/pacman/db.lck 锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;系统服务的操作与介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统服务的操作与介绍&#34;&gt;#&lt;/a&gt; 系统服务的操作与介绍&lt;/h2&gt;
&lt;p&gt;Linux 系统中运行着各种服务，你需要掌握查询，变更服务状态的方式。同时对创建服务最好也有大致的了解。这里讲述命令 &lt;code&gt;systemctl&lt;/code&gt;  的用法。以 dhcpcd 为例&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl start dhcpcd          &lt;span class=&#34;token comment&#34;&gt;# 启动服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl stop dhcpcd           &lt;span class=&#34;token comment&#34;&gt;# 停止服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl restart dhcpcd        &lt;span class=&#34;token comment&#34;&gt;# 重启服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl reload dhcpcd         &lt;span class=&#34;token comment&#34;&gt;# 重新加载服务以及它的配置文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl status dhcpcd         &lt;span class=&#34;token comment&#34;&gt;# 查看服务状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl &lt;span class=&#34;token builtin class-name&#34;&gt;enable&lt;/span&gt; dhcpcd         &lt;span class=&#34;token comment&#34;&gt;# 设置开机启动服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl &lt;span class=&#34;token builtin class-name&#34;&gt;enable&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--now&lt;/span&gt; dhcpcd   &lt;span class=&#34;token comment&#34;&gt;# 设置服务为开机启动并立即启动这个单元:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl disable dhcpcd        &lt;span class=&#34;token comment&#34;&gt;# 取消开机自动启动&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl daemon-reload dhcpcd  &lt;span class=&#34;token comment&#34;&gt;# 重新载入 systemd 配置 扫描新增或变更的服务单元 不会重新加载变更的配置 加载变更的配置用 reload&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;换源-阿里云&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#换源-阿里云&#34;&gt;#&lt;/a&gt; 换源 - 阿里云&lt;/h2&gt;
&lt;p&gt;编辑文件 &lt;code&gt;/etc/pacman.d/mirrorlist&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; /etc/pacman.d/mirrorlist&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在镜像源列表最顶端添加：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Server &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; http://mirrors.aliyun.com/archlinux/&lt;span class=&#34;token variable&#34;&gt;$repo&lt;/span&gt;/os/&lt;span class=&#34;token variable&#34;&gt;$arch&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvYXJjaGxpbnV4Y24/c3BtPWEyYzZoLjEzNjUxMTAyLjAuMC4zZTIyMWIxMU5jOFVwWQ==&#34;&gt;阿里云开发者社区 &amp;gt; 镜像站 &amp;gt; archlinuxcn&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Syy&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; archlinuxcn-keyring &lt;span class=&#34;token comment&#34;&gt;# 安装 archlinuxcn-keyring 包导入 GPG key&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;安装yay&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装yay&#34;&gt;#&lt;/a&gt; 安装 yay&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; yay&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#安装完成后再次更新&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yay &lt;span class=&#34;token parameter variable&#34;&gt;-Syyu&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; yay &lt;span class=&#34;token parameter variable&#34;&gt;-Sys&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;常见问题及其解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见问题及其解决&#34;&gt;#&lt;/a&gt; 常见问题及其解决&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 yay 命令时报错：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;搜索 AUR 时出错: response decoding failed: invalid character &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;&#39;&lt;/span&gt; looking &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;解决：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yay &lt;span class=&#34;token parameter variable&#34;&gt;--aururl&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https://aur.archlinux.org&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--save&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Telegram 无法登陆：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决：&lt;br /&gt;
SETTING 中添加地址，使用代理，port 选择代理所使用端口号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接显示器无法使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决：&lt;br /&gt;
根据&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNobGludXhzdHVkaW8uZ2l0aHViLmlvL0FyY2hMaW51eFR1dG9yaWFsLyMv&#34;&gt; Linux 安装使用教程&lt;/span&gt;中&lt;strong&gt;显卡驱动&lt;/strong&gt;所描述进行即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VSCode 无法唤出外部终端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决：&lt;br /&gt;
 &lt;code&gt;.vscode&lt;/code&gt;  文件中设置启用外部终端，在 &lt;code&gt;settings.json&lt;/code&gt;  文件中加入 &amp;quot;terminal.external.linuxExec&amp;quot;: &amp;quot;/usr/bin/konsole&amp;quot;, &amp;quot;&amp;quot; 内指要调用的终端 bin/konsole。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在升级系统（syu）时，出现以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;错误：python-markdown: 来自 &lt;span class=&#34;token string&#34;&gt;&#34;Caleb Maclennan &amp;lt;alerque@archlinux.org&gt;&#34;&lt;/span&gt; 的签名是勉强信任的&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:: 文件 /var/cache/pacman/pkg/python-markdown-3.3.6-1-any.pkg.tar.zst 已损坏 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;无效或已损坏的软件包 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;PGP 签名&lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;打算删除吗？ &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;Y/n&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;错误：trash-cli: 来自 &lt;span class=&#34;token string&#34;&gt;&#34;Alexander Epaneshnikov &amp;lt;alex19ep@archlinux.org&gt;&#34;&lt;/span&gt; 的签名是勉强信任的&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:: 文件 /var/cache/pacman/pkg/trash-cli-0.21.10.24-1-any.pkg.tar.zst 已损坏 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;无效或已损坏的软件包 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;PGP 签名&lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;打算删除吗？ &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;Y/n&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;错误：无法提交处理 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;无效或已损坏的软件包&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;发生错误，没有软件包被更新。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;p&gt;终端输入： &lt;code&gt;sudo pacman-key --init &amp;amp;&amp;amp; sudo pacman-key --populate &amp;amp;&amp;amp; sudo pacman -Syyu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可能的方法： &lt;code&gt;sudo pacman -S archlinux-keyring&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用docker&#34;&gt;#&lt;/a&gt; 使用 Docker&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 安装 Docker -Ss 搜索 Docker 软件包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&#34;token builtin class-name&#34;&gt;enable&lt;/span&gt; docker.service &lt;span class=&#34;token comment&#34;&gt;# 开启 Docker 开机自启动服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl start docker.service  &lt;span class=&#34;token comment&#34;&gt;# 启动 Docker 服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 安装好 docker 后自动建立了 docker 组，不需要自己添加 docker 组，只需要把当前工作用户加入 docker 组即可&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; gpasswd &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt; &lt;span class=&#34;token environment constant&#34;&gt;$USER&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 把工作用户加入 Docker 组，避免使用 root 账号工作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#重启系统生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; systemctl disable docker.service &lt;span class=&#34;token comment&#34;&gt;# 关闭开机自启动服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取镜像：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull archlinux  &lt;span class=&#34;token comment&#34;&gt;# 下载镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; image &lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;# 列出镜像列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt;           &lt;span class=&#34;token comment&#34;&gt;# 列出容器列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; archlinux /bin/bash       &lt;span class=&#34;token comment&#34;&gt;# 用所给镜像启动一个新的容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;--rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--net&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;host gpt-academic &lt;span class=&#34;token comment&#34;&gt;# 用所给镜像启动一个新的容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;CONTAINER_NAME&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 进入一个正在运行的 docker (在容器内部创建一个子进程)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; stop &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;contaionerID&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;               &lt;span class=&#34;token comment&#34;&gt;# 终止镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; rmi &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; images &lt;span class=&#34;token parameter variable&#34;&gt;-q&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;           &lt;span class=&#34;token comment&#34;&gt;# 删除所有镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; stop &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-aq&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;             &lt;span class=&#34;token comment&#34;&gt;# 停止所有容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; container &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;contaionerID&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;# 删除一个处于终止状态的容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; container &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; images &lt;span class=&#34;token parameter variable&#34;&gt;-q&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 删除所有容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置镜像：&lt;/p&gt;
&lt;p&gt;启动镜像，配置初始开发环境，安装了一些包（可能有些没有用），&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-t&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; archlinux /bin/bash &lt;span class=&#34;token comment&#34;&gt;# 启动镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 在 docker 内输入以下内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1i Server = http://mirrors.aliyun.com/archlinux/$repo/os/$arch&#39;&lt;/span&gt; /etc/pacman.d/mirrorlist &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1i Server = https://mirrors.tencent.com/archlinux/$repo/os/$arch&#39;&lt;/span&gt; /etc/pacman.d/mirrorlist &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;$i [archlinuxcn]&#39;&lt;/span&gt; /etc/pacman.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;$i SigLevel = TrustAll&#39;&lt;/span&gt; /etc/pacman.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;$i Server = https://repo.archlinuxcn.org/$arch&#39;&lt;/span&gt; /etc/pacman.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;s/^NoExtract\s*=\s*.*/# \0/g&#39;&lt;/span&gt; /etc/pacman.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Syyu&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--noconfirm&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Sy&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--noconfirm&lt;/span&gt; archlinuxcn-keyring &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Su&lt;/span&gt; --noconfirm&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Syy&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--noconfirm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; neovim &lt;span class=&#34;token function&#34;&gt;zsh&lt;/span&gt; oh-my-zsh-git jdk-openjdk jdk8-openjdk jdk11-openjdk &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    maven yay &lt;span class=&#34;token function&#34;&gt;zsh&lt;/span&gt; python3 go nodejs &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;yarn&lt;/span&gt; tmux python2 zsh-autosuggestions zsh-syntax-highlighting &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    zsh-theme-powerlevel10k ranger python-pip python-neovim wl-clipboard fzf ripgrep man-db &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    gcc clang base-devel wqy-zenhei noto-fonts-cjk &lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;unzip&lt;/span&gt; thefuck &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-sf&lt;/span&gt; /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Scc&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--noconfirm&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-rf&lt;/span&gt; /var/lib/pacman/sync/* /var/cache/pacman/pkg/* &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; /var/log/pacman.log&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;精简版本：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1i Server = http://mirrors.aliyun.com/archlinux/$repo/os/$arch&#39;&lt;/span&gt; /etc/pacman.d/mirrorlist &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1i Server = https://mirrors.tencent.com/archlinux/$repo/os/$arch&#39;&lt;/span&gt; /etc/pacman.d/mirrorlist &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;$i [archlinuxcn]&#39;&lt;/span&gt; /etc/pacman.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;$i SigLevel = TrustAll&#39;&lt;/span&gt; /etc/pacman.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;$i Server = https://repo.archlinuxcn.org/$arch&#39;&lt;/span&gt; /etc/pacman.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;s/^NoExtract\s*=\s*.*/# \0/g&#39;&lt;/span&gt; /etc/pacman.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Syyu&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--noconfirm&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Sy&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--noconfirm&lt;/span&gt; archlinuxcn-keyring &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Su&lt;/span&gt; --noconfirm&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Syy&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--noconfirm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; neovim &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    maven yay go &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;yarn&lt;/span&gt; tmux &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ranger python-pip python-neovim wl-clipboard fzf ripgrep man-db &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    gcc clang base-devel wqy-zenhei noto-fonts-cjk &lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;unzip&lt;/span&gt; thefuck &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-sf&lt;/span&gt; /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Scc&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--noconfirm&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-rf&lt;/span&gt; /var/lib/pacman/sync/* /var/cache/pacman/pkg/* &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; /var/log/pacman.log&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 vscode：&lt;/p&gt;
&lt;p&gt;下载插件：Remote Development Pack（包含 Remote-Containers)，Docker。打开插件，在 CONTAINERS 中右键 Attach Visual Studio Code，在 vscode 中运行了镜像，重新安装一些扩展，当作一个新的 archlinux 一样使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器和本地间的文件传输：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 获得容器 ID&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; 本地文件路径 ID全称:容器路径 &lt;span class=&#34;token comment&#34;&gt;# 本地文件复制到容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; ID全称:容器文件路径 本地路径 &lt;span class=&#34;token comment&#34;&gt;# 容器文件复制到本地&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;typorapicgogithub图床&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typorapicgogithub图床&#34;&gt;#&lt;/a&gt; Typora+PicGo+Github 图床&lt;/h2&gt;
&lt;p&gt;整体遵循：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTM3NDA3MDg2NjAwI2hlYWRpbmctOA==&#34;&gt;https://juejin.cn/post/6844904137407086600#heading-8&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 GIthub 仓库并创建 Token 并复制&lt;/li&gt;
&lt;li&gt;下载 PicGo（app）并配置，包括时间戳命名，选择 github 图床，仓库名，分支用 main，设定 Token&lt;/li&gt;
&lt;li&gt;下载并配置 node.js&lt;/li&gt;
&lt;li&gt;配置 Typora 并测试图床&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;编译安装从-github-下载的源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译安装从-github-下载的源码&#34;&gt;#&lt;/a&gt; 编译安装从 GitHub 下载的源码&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;执行以下命令，生成 Makefile 文件：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./autogen.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果下载的源代码中已经包含了 Makefile 文件，则可以跳过此步骤。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行以下命令，配置编译选项：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./configure&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;configure 脚本会检查系统环境和依赖库，并生成 Makefile 文件。可以通过指定不同的选项来定制编译过程。&lt;/p&gt;
&lt;p&gt;例如，可以使用 --prefix 选项指定安装目录，使用 --enable-shared 选项生成共享库等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行以下命令，开始编译：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个命令会编译源代码，并生成可执行文件或共享库等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行以下命令，安装编译好的文件：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo make install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个命令会将编译好的文件安装到系统中，通常是 /usr/local 目录。 如果在执行 configure 或 make 命令时遇到了错误，可以根据错误信息进行调整。通常情况下，错误信息会提示缺少依赖库或者系统环境不兼容等问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;安装deb包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装deb包&#34;&gt;#&lt;/a&gt; 安装 deb 包&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用 yay 安装 debtap。  &lt;code&gt;yay -S debtap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;升级的 debtap。 &lt;code&gt;sudo debtap -U&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;转换 deb 包，生成一个 &lt;code&gt;yourfile.zst&lt;/code&gt;  文件。 &lt;code&gt;sudo debtap yourfile.deb&lt;/code&gt; （接两次回车）&lt;/li&gt;
&lt;li&gt;安装转换后的包。 &lt;code&gt;sudo pacman -U yourfile.zst&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;压缩文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#压缩文件&#34;&gt;#&lt;/a&gt; 压缩文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;  ：生成一个新的归档文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;  ：输出到文件中，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-z&lt;/code&gt;  &amp;amp;  &lt;code&gt;-j&lt;/code&gt;  ：将 tar 压缩成 gzip 和 bzip2 格式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;archive&lt;/code&gt;  ：压缩文件的名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/path/to/folder&lt;/code&gt;  ：要压缩的文件夹的路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将文件夹压缩成 .tar 文件:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;copy codetar &lt;span class=&#34;token parameter variable&#34;&gt;-cf&lt;/span&gt; archive.tar /path/to/folder&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将文件夹压缩成 .tar.gz 文件:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;copy codetar &lt;span class=&#34;token parameter variable&#34;&gt;-czf&lt;/span&gt; archive.tar.gz /path/to/folder&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将文件夹压缩成 .tar.bz2 文件:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;copy codetar &lt;span class=&#34;token parameter variable&#34;&gt;-cjf&lt;/span&gt; archive.tar.bz2 /path/to/folder&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;安装qq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装qq&#34;&gt;#&lt;/a&gt; 安装 QQ&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yay &lt;span class=&#34;token parameter variable&#34;&gt;-Ss&lt;/span&gt; linuxqq &lt;span class=&#34;token comment&#34;&gt;# 在 AUR 查找 linuxQQ &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yay &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; linuxqq  &lt;span class=&#34;token comment&#34;&gt;# 从 AUR 安装 linuxqq&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Rns&lt;/span&gt; linuxqq &lt;span class=&#34;token comment&#34;&gt;# 删除 linuxqq 及不再需要的依赖&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;登陆后闪退的可能解决办法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#登陆后闪退的可能解决办法&#34;&gt;#&lt;/a&gt; 登陆后闪退的可能解决办法：&lt;/h3&gt;
&lt;p&gt;删除 &lt;code&gt;~/.config/QQ&lt;/code&gt;  下的所有文件，重启 QQ 进行登陆并在设置里关闭 QQ 自己的更新。&lt;/p&gt;
&lt;p&gt;其他问题请自行在 Google 或者在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYnMuYXJjaGxpbnV4Y24ub3JnL2luZGV4LnBocA==&#34;&gt; Arch 中文社区&lt;/span&gt;寻找解决方案&lt;/p&gt;
&lt;h2 id=&#34;安装-fcitx5及中文输入法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-fcitx5及中文输入法&#34;&gt;#&lt;/a&gt; 安装 fcitx5 及中文输入法&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; fcitx5-im &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; fcitx5-chinese-addons  fcitx5-rime&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;sudo vim /etc/environment&lt;/code&gt; ，添加如下内容，之后重启输入法：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;fcitx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;fcitx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;XMODIFIERS&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;@im&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;fcitx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;SDL_IM_MODULE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;fcitx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在设置中找到输入法，添加输入法，选拼音&lt;/p&gt;
&lt;h3 id=&#34;中文标点消失&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中文标点消失&#34;&gt;#&lt;/a&gt; 中文标点消失：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编辑～/.config/fcitx/data/punc.mb.zh_CN，自行查找&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[ctrl+.]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装zsh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装zsh&#34;&gt;#&lt;/a&gt; 安装 zsh&lt;/h2&gt;
&lt;h3 id=&#34;编辑配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编辑配置文件&#34;&gt;#&lt;/a&gt; 编辑配置文件:&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; ~/.zshrc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;目前的:&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;XDG_CACHE_HOME&lt;span class=&#34;token operator&#34;&gt;:-&lt;/span&gt;$HOME&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;.cache&amp;#125;&lt;/span&gt;/p12k-instant-prompt-&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;(&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;)&lt;span class=&#34;token operator&#34;&gt;:-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;n&amp;#125;&lt;/span&gt;.zsh&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;XDG_CACHE_HOME&lt;span class=&#34;token operator&#34;&gt;:-&lt;/span&gt;$HOME&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;.cache&amp;#125;&lt;/span&gt;/p11k-instant-prompt-&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;(&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;)&lt;span class=&#34;token operator&#34;&gt;:-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;n&amp;#125;&lt;/span&gt;.zsh&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;ZSH&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/usr/share/oh-my-zsh/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;ZSH_THEME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;powerlevel10k/powerlevel10k&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	autojump&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	zsh-syntax-highlighting&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	zsh-autosuggestions&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;ZSH_CACHE_DIR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token environment constant&#34;&gt;$HOME&lt;/span&gt;/.cache/oh-my-zsh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$ZSH_CACHE_DIR&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$ZSH_CACHE_DIR&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$ZSH&lt;/span&gt;/oh-my-zsh.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; ~/.p10k.zsh &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.p10k.zsh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# other name&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;sudo pacman&#39;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;syyu&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;yay -Syyu&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 强制升级系统和软件包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;syu&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;yay -Syu&#39;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 升级系统和软件包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;clear&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 清屏&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;exit&#39;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 退出终端&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;qq&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;rm -rf ~/.config/QQ/ &amp;amp;&amp;amp; linuxqq &amp;amp;&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 启动 QQ 时删除文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# git 快捷键 cd+add+commit+push+cd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将本地 Note 仓库提交到 gihub&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;gpn&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cd /home/origin/Code/repository/Note &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m \&#34;update\&#34; &amp;amp;&amp;amp; git push &amp;amp;&amp;amp; cd -&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将本地 Code_c 仓库提交到 gihub&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;gpc&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cd /home/origin/Code/repository/Code_c &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m \&#34;update\&#34; &amp;amp;&amp;amp; git push &amp;amp;&amp;amp; cd -&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将本地 Code_cc 仓库提交到 gihub&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;gpcc&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cd /home/origin/Code/repository/Code_cc &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m \&#34;update\&#34; &amp;amp;&amp;amp; git push &amp;amp;&amp;amp; cd -&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将本地 Python 仓库提交到 gihub&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;gppy&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cd /home/origin/Code/repository/Code_py &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m \&#34;update\&#34; &amp;amp;&amp;amp; git push &amp;amp;&amp;amp; cd -&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将本地 my-xv6-labs-2022 仓库提交到 gihub&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;gplab&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cd /home/origin/Code/repository/my-xv6-labs-2022 &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m \&#34;update\&#34; &amp;amp;&amp;amp; git push &amp;amp;&amp;amp;cd -&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;GOPATH&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token environment constant&#34;&gt;$HOME&lt;/span&gt;/go&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;:/usr/lib/go/bin:&lt;span class=&#34;token variable&#34;&gt;$GOPATH&lt;/span&gt;/bin&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/usr/sbin:&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;## 为一个文件或目录创建一个符号链接：&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;/usr/local/local&lt;/code&gt;  中存有已经建立的符号链接，在 &lt;code&gt;/usr/share&lt;/code&gt;  中有通过自行下载的装包安装的软件，如通过官网安装包安装的 code。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;ln -s [文件/目录路径] [建立后的软链接名称]&lt;/code&gt; ，即可建立链接。如： &lt;code&gt;ln -s /usr/share/code/code code&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;更改默认jva环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更改默认jva环境&#34;&gt;#&lt;/a&gt; 更改默认 Jva 环境&lt;/h2&gt;
&lt;h3 id=&#34;安装java环境java-20-jdk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装java环境java-20-jdk&#34;&gt;#&lt;/a&gt; 安装 Java 环境（Java-20-jdk）&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Sy&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--needed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--noconfirm&lt;/span&gt; jdk&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;archlinux-java status&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若出现类似下面，即为安装成功&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Available Java environments:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  java-21-jdk&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  java-21-openjdk&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  java-8-openjdk &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;default&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;若 java-21-openjdk 为 default 则已成功将 java21 设置为默认环境，若不是，则输入&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; archlinux-java &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; java-20-openjdk&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;你想要设为默认的java环境名&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;后输入 &lt;code&gt;archlinux-java status&lt;/code&gt;  查看， java-21-openjdk 已是 default&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Available Java environments:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  java-21-jdk&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  java-21-openjdk &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;default&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  java-8-openjdk&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;archlinux内存管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#archlinux内存管理&#34;&gt;#&lt;/a&gt; ArchLinux 内存管理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;清除 Arch Linux 上的包缓存和 AUR 软件包&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Scc&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yay &lt;span class=&#34;token parameter variable&#34;&gt;-Scc&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Arch Linux 在 /var/cache/pacman/pkg/ 目录中存储下载的每个软件包，包括升级。如果更新破坏了软件包，便于回滚到以前的版本。 /home/origin/.cache/yay 存有 AUR 的软件包。下面的名令将从缓存 /var/cache/pacman/pkg/ 中删除当前未安装的所有包。在命令中添加另一个 **-c**（最后有两个 c）标志将删除所有缓存的包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除孤立的软件包&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Qtdq&lt;/span&gt; 查看删除孤立的软件包&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Rns&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;pacman &lt;span class=&#34;token parameter variable&#34;&gt;-Qtdq&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清理日志，设置了固定大小为 50M，多的日志会被删掉。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;journalctl --vacuum-size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;50M&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;python-使用-pip-遇到问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python-使用-pip-遇到问题&#34;&gt;#&lt;/a&gt; python 使用 pip 遇到问题&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; scikit-learn&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;error: externally-managed-environment&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;× This environment is externally managed&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;╰─&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; To &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; Python packages system-wide, try &lt;span class=&#34;token string&#34;&gt;&#39;pacman -S&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    python-xyz&#39;&lt;/span&gt;, where xyz is the package you are trying to&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    install.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    If you wish to &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; a non-Arch-packaged Python package,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    create a virtual environment using &lt;span class=&#34;token string&#34;&gt;&#39;python -m venv path/to/venv&#39;&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Then use path/to/venv/bin/python and path/to/venv/bin/pip.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    If you wish to &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; a non-Arch packaged Python application,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    it may be easiest to use &lt;span class=&#34;token string&#34;&gt;&#39;pipx install xyz&#39;&lt;/span&gt;, &lt;span class=&#34;token function&#34;&gt;which&lt;/span&gt; will manage a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    virtual environment &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; you. Make sure you have python-pipx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    installed via pacman.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hint: See PEP &lt;span class=&#34;token number&#34;&gt;668&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; the detailed specification.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解决：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; /usr/lib/python3.11/EXTERNALLY-MANAGED&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;修改用户名及用户目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改用户名及用户目录&#34;&gt;#&lt;/a&gt; 修改用户名及用户目录&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;切换终端，用 root 账户登录；&lt;/li&gt;
&lt;li&gt;编辑 /etc/passwd 文件，将旧用户名替换为新用户名；&lt;/li&gt;
&lt;li&gt;编辑 /etc/shadow 文件，将旧用户名替换为新用户名；&lt;/li&gt;
&lt;li&gt;编辑 /etc/group 文件，将旧用户名替换为新用户名；&lt;/li&gt;
&lt;li&gt;重命名 home 文件： mv /home/oldusername/home/newusername&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注：目录名的改变会导致一些固定路径的配置项发生错误，需要手动修改路径。&lt;/p&gt;
&lt;h2 id=&#34;linux-修改u盘名称&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux-修改u盘名称&#34;&gt;#&lt;/a&gt; Linux 修改 U 盘名称&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mtools&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 安装工具&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; /etc/mtools.conf &lt;span class=&#34;token comment&#34;&gt;# 然后修改配置文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 在这个文件最后添加下面一行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;mtools_skip_check&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; mlabel &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; /dev/sdb1 ::DISK2 &lt;span class=&#34;token comment&#34;&gt;# sdb1 是 U 盘，SISK2 是修改后的名称（自动改大写）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;eject&lt;/span&gt; /dev/sdb1      &lt;span class=&#34;token comment&#34;&gt;# 修改完成&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="ArchLinux" scheme="http://yuanmxc.site/categories/ArchLinux/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/C++/C++%20Primer%E7%AC%94%E8%AE%B0/</id>
        <title>C++ Primer笔记</title>
        <link rel="alternate" href="http://yuanmxc.site/C++/C++%20Primer%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;p&gt;注意：本文并不是教你学 C++，这只是笔者学习 C&lt;ins&gt; 过程中记录的相关知识，适用于已经对 C&lt;/ins&gt; 有所了解的读者进行复习和查询，读者至少对 C 和 C++ 有所了解。&lt;/p&gt;
&lt;h2 id=&#34;小记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小记&#34;&gt;#&lt;/a&gt; 小记：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;有符号和无符号一起用，有符号转无符号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;double（一般 16 有效位）一般和 float（一般 7 有效位）运算代价相同，用 double 即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;char16_t 和 char32_t 为 Unicode 字符，包含所有自然语言字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;泛化的转义序列： &lt;code&gt;\x&lt;/code&gt;  后跟 1 或多个十六进制数字或者 &lt;code&gt;\&lt;/code&gt;  后跟多个八进制数字： &lt;code&gt;\12&lt;/code&gt; （换行符） &lt;code&gt; \x4d&lt;/code&gt; （字符 M）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化不是赋值，定义变量时若未指定初始值，变量被&lt;strong&gt;默认初始化&lt;/strong&gt;，“默认值” 由变量类型和定义位置决定。定义在任何函数体之外的内置类型变量会被默认初始化为 0，定义在函数体内部的内置类型变量不被初始化，它的值是未定义的。每个类各自决定初始化对象的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声明使得名字为程序所知，定义负责创建于名字关联的实体。变量能且只能被定义一次，但是可以被多次声明。任何包含了显式初始化的声明即成为定义。多个文件使用同一变量，只能有一个定义，其他文件必须声明才能使用，决不能定义该变量。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;extern int i；  // 声明i而非定义i
int j；         // 声明并定义j
extern double pi = 3.1415926； // 定义，extern作用被抵消
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用只是一个已经存在的对象的另一个名字，它和它的初始值（一个对象）一直绑定在一起，必须被初始化。对引用的操作就是对于它绑定的对象的操作（可以视为替换）。引用本身不是对象，无法定义引用的引用和指针。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int ival = 1024;
int &amp;amp;refVal = ival;
refVal = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;::&lt;/code&gt;  作用域运算符，使用 &lt;code&gt;::reuserd&lt;/code&gt;  的方式可以访问被局部变量覆盖的全局变量，全局作用域本身没有名字，所以 &lt;code&gt;::&lt;/code&gt;  左侧为空时会向全局作用域发起请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把 int 变量直接赋给指针是错误的操作，即使他的值为 0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对指针的引用：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int i = 21;
int *p;
int *&amp;amp;r = p;
r = &amp;amp;i;  // 令p指向i
*r = 0;  // 将p指向的变量i的值改为0
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当以编译时初始化的方式定义一个 const 对象时，例如： &lt;code&gt;const int bufSize = 512;&lt;/code&gt; ，编译器会将在编译过程中用到该变量的地方都替换成对应的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认状态下，const 对象被设定为仅在文件内有效。当多个文件中出现同名 const 变量时，等同于在不同文件中分别定义了独立的变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当希望 const 变量初始值不是常量表达式，但需要在文件间共享，即和其他对象一样，只在一个地方定义 const 变量，而在其他多个文件中声明并使用它，则不管是声明还是定义都添加 extern 关键字，这样只需要定义一次就可以了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// file_1.cc 定义并初始化了一个常量，该常量能被其他文件访问
extern const int bufSize = fcn();
// file_1.h 头文件
extern const int bufSize;  // 与file_1.cc 中定义的bufSize是同一个
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对 const 对象的引用称之为对常量的引用（&lt;strong&gt;常量引用&lt;/strong&gt;）。不能让一个非常量引用指向一个常量对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般来说引用的类型应该与其所引用的对象的类型一致，但有下面两个例外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对 const 的引用可能引用一个并非 const 的对象。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int i = 42;
int &amp;amp;r1 = i;
const int &amp;amp;r2 = i; // r2绑定对象i但是不允许通过r2修改i的值。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化常量引用时允许使用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可，尤其，允许为一个常量引用绑定非常量的对象、字面值，甚至是一个表达式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double i = 3.14;
const int &amp;amp;r1 = i;      // 正确，double可以转换成int，常量引用可以绑定非常量对象
const int &amp;amp;r2 = 42;     // 正确：r2是一个常量引用，可以绑定字面值
const int &amp;amp;r3 = r1 * 2; // 正确：r3是一个常量引用，可以绑定表达式
int &amp;amp;r4 = r1 *2         // 错误：r4是一个普通的非常量引用
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上面第 1、2 行代码为例，当一个常量引用被绑定到另一种类型上时，编译器把 i 转化一个整形常量 3，这个 3 是一个临时量对象，是编译器需要的一个用来暂存表达式求值结果时临时创建的一个未命名的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般来说指针的类型应该与其所指对象的类型一致，但有下面两个例外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许一个指向常量的指针指向另一个非常量的对象。&lt;/li&gt;
&lt;li&gt;常量指针可以指向非常量对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;顶层 const&lt;/strong&gt; 表示指针本身是一个常量，&lt;strong&gt;底层 const&lt;/strong&gt; 表示指针所值的对象是一个常量。当执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层 const 资格，或者两个对象的数据类型必须能够转换，一般来说，非常量可以转换成常量，反之则不行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将变量声明为 constexptr 类型，让编译器来验证变量的值是否是一个常量表达式（值不会改变且在编译过程就能得到计算结果的表达式）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;constexpr =int mf = 20;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义类型别名：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;typedef double wages;    // wages是double的同义词
typedef wasges base, *p; // base是double的同义词，p是double*的同义词
using SI = Sales_item;   // SI是Sales_item的同义词
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单的把类型别名替换成它原本样子可能是错误的，后两句如果进行简单的文本替换，基本数据类型变为 const char .&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;const char *cstr = 0; // 声明的是一个指向 const char 的指针
typedef char *pstring;  // pstring的类型是指向char的指针
const pstring cstr = 0; // cstr是指向char的常量指针
const pstring *ps;      // ps是一个指针，他指向的对象是一个指向char的常量指针
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;auto 一般会忽略掉&lt;strong&gt;顶层 const&lt;/strong&gt; ，同时&lt;strong&gt;底层 const&lt;/strong&gt; 会被保留。想保留，需要用 const atuo 。设置一个类型为 auto 的引用时，初始值中的顶层常量属性仍然被保留。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decltype ( ) 返回（）中表达式的类型。如果 decltype 使用的表达式是一个变量，则 decltype 返回该变量的类型（包括顶层 const 和引用在内）。如果表达式的内容是解引用操作，则 decltype 将得到引用类型。decltype 使用的表达式是变量，该变量是否有括号会影响结果，如果无括号，得到的类型是该变量的类型，如果有括号，得到的是该变量对应的引用类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;decltype (f()) sum = x; // sum的类型就是函数f的返回类型，编译器并不实际调用f()
// decltype的结果可以是引用类型
int i = 42, *p = &amp;amp;i, &amp;amp;r = i;
decltype(r + 0） b; // 正确：加法的结果是int,因此b是一个(未初始化的)int
decltype(*p) c;     // 错误：*p的类型是int，但他是解引用操作，所以c的类型是int&amp;amp;,必须初始化
decltype((i)) d;    // 错误：使用(i)得到的是 int&amp;amp; 类型，必须初始化
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;头文件保护符 &lt;code&gt;#ifndef&lt;/code&gt;  、 &lt;code&gt;#ifdef&lt;/code&gt; 、 &lt;code&gt;#endif&lt;/code&gt;  应该包含在头文件中，即使头文件（目前还）没有被包含在任何其他头文件中。头文件不应该使用 using 声明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;string 字符串使用字符串字面值初始化时，不包含字符串字面值最后隐藏的空字符，字符串字面值实际上包含写出来的字符和隐藏的空字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cin 在读取 string 时，string 对象会自动忽略开头的空白（空格符、换行符、制表符等），并从第一个真正的字符开始读起，直到遇见下一次处空白为止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getline(cin, line)&lt;/code&gt;  读取一整行，参数是一个输入流和一个 string 对象，函数从输入流中读入内容，直到遇到换行符为止（换行符也被读进来了），然后把所读的对象存入到 string 对象中（但是不存读入的换行符）。如果一开始就输入换行符，那么得到空 string。触发 getline 函数返回的换行符实际上被丢掉了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sting 操作中的 size () 等函数，返回的数字类型配套的， &lt;code&gt;size()&lt;/code&gt;  返回 &lt;code&gt;string:: size_type&lt;/code&gt;  类型，一个无符号整型，使用 &lt;code&gt;auto&lt;/code&gt;  或者 &lt;code&gt;decltype()&lt;/code&gt;  推断变量类型来存比较好。注意无符号整型和有符号整型混用的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;string 比较规则：返回两个 string 对象第一个不同字符的比较结果，若全相同，则长的大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当把 string 对象和字符字面值及字符串字面值混在一条语句中使用时，必须确保每个加法运算符的两侧的运算对象至少有一个是 string，字符串字面值不是 string 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;string 的下标运算符接收的参数是 string::size_type 类型的值，返回值是该位置上字符的引用。在范围 for 语句中也需要使用引用来修改 string 中的字符，使用 char 的话没有改变原 string 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// 初始化
string s1;                    // 默认初始化，空字符串
string s2 = &amp;quot;&amp;quot;;               // 拷贝初始化，空字符串
string s3 = &amp;quot;hello&amp;quot;;          // 拷贝初始化
string s4(&amp;quot;world&amp;quot;);           // 拷贝初始化，使用构造函数定义并初始化字符串
string s5(10,&#39;c&#39;);            // 直接初始化，是十个c的字符串
string s6 = string(10,&#39;c&#39;)    // 拷贝初始化，创建了一个临时对象然后拷贝给s6
// 成员函数
s[n]          // 返回n位置上的字符的引用
s.empty()     // s是否为空，空为真，不空为假
s.length()    // 或者 s.size()，返回s中字符个数
s.at(n);      // 返回下标为n的字符
s.find(&amp;quot;ld&amp;quot;); // 返回 &amp;quot;ld&amp;quot; 在字符串中的位置n
s.replace(6, 5, &amp;quot;there&amp;quot;);     // 把 &amp;quot;world&amp;quot; 替换成 &amp;quot;there&amp;quot;
s.substr(0, 5); // 返回i字符串的前5个字符组成的字符串
s.substr(6);    // 返回从字符串的第7个字符到末尾的字符组成的字符串
s.insert(6, &amp;quot;there&amp;quot;);         // 在下标为6的位置插入there“，后面字符顺延
s.insert(6, 1, &#39;-&#39;);          // 在第6个位置插入 &#39;-&#39;，后面字符顺延
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用花括号初始化 vector 对象时，会优先使用列表初始化，提供的值必须与元素类型相同，如果不同，无法执行列表初始化，编译器会尝试使用默认初始化 vector 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般创建一个空的 vector ，再向里面添加元素更好，直接初始化可能性能更差，同时，如果改变了 vector 容量，不应使用范围 for 循环，范围 for 语句内不应该改变其所遍历序列的大小。不能使用下标形式为 vector 添加元素，只能对已存在的元素执行下标操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 类模板 vector **：&lt;/p&gt;
&lt;p&gt;vector 定义在头文件中，需要包含，并位于 std 命名空间中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;double&amp;gt; v;      // 创建空容器
vector&amp;lt;string&amp;gt; v1&amp;#123;10&amp;#125;; // 10不是string，使用默认初始化，初始化有10个string的vectoer
vector&amp;lt;double&amp;gt; v(20， 1.0); // 直接初始化有20个double的vectoe，初始值均为1.0,没有第二个参数初始值默认均为0，使用花括号也可
vector&amp;lt;int&amp;gt; values2&amp;#123;1,2,3,4,2,1&amp;#125;; // 指定元素个数和初始值
vector&amp;lt;int&amp;gt; values3(values2);  // 创建和alces相同的容器
vector&amp;lt;int&amp;gt; values4(begin(value2,begin(v。alue2)+3)) // 使用指针或者迭代器来指定初始值范
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vector 容器包含的成员函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;begin()	    // 返回指向容器中第一个元素的迭代器。
end()	    // 返回指向容器最后一个元素所在位置后一个位置的迭代器。
front()	    // 返回第一个元素的引用。
back()	    // 返回最后一个元素的引用。
data()	    // 返回指向容器中第一个元素的指针。
assign()    // 用新元素替换原有内容。
push_back()	// 在序列的尾部添加一个元素。
pop_back()	// 移出序列尾部的元素。
insert()	// 在指定的位置插入一个或多个元素。
erase()	    // 移出一个元素或一段元素。
clear()	    // 移出所有的元素，容器大小变为 0。
rbegin()  // 返回指向最后一个元素的迭代器。
rend()	  // 返回指向第一个元素所在位置前一个位置的迭代器。
cbegin()  // 和 begin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
cend()	  // 和 end() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
crbegin() // 和 rbegin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
crend()	  // 和 rend() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
size()	  // 返回实际元素个数 类型是vector&amp;lt;T&amp;gt;::size_type，T为vector存储的元素类型。
max_size()// 返回元素个数的最大值。这通常是一个很大的值，一般是 2^32-1，所以我们很少会用到这个函数。
resize()  // 改变实际元素的个数。
capacity()// 返回当前容量。
empty()	  // 判断容器中是否有元素，若无元素，则返回 true；反之，返回 false。
reserve() // 增加容器的容量。
shrink _to_fit()  // 将内存减少到等于当前元素实际所使用的大小。
operator[ ]	      // 重载了 [ ] 运算符，可以向访问数组中元素那样，通过下标即可访问甚至修改 vector 容器中的元素。
at()	        // 使用经过边界检查的索引访问元素。
swap()	        // 交换两个容器的所有元素。
emplace()	    // 在指定的位置直接生成一个元素。
emplace_back()	// 在序列尾部生成一个元素。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果容器为空，begin 和 end 都返回尾后迭代器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准容器迭代器的部分运算符：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;*it            // 返回迭代器it所指元素的引用
(*it).empty()  // it指示一个strng类型并判断string是否为空，必须加()，否则先进行点运算
it-&amp;gt;empty()    // 解引用it并获取该元素的名为mem的成员，等价于(*it).empty()
++it           // 令it指示容器中的下一个元素
--it           // 令it指示容器中的上一个元素
it1 == it2     // 判断两个选代器是否相等，如果两个选代器指示的是同一个元素或者它们是同一个容器的尾后选代器，则相等；反之，不相等
+、-、+=、-=、&amp;lt;、&amp;gt;、&amp;lt;=、&amp;gt;=
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;某些对 vector 的操作（任何可能改变 vertor 对象容量的操作）会使迭代器失效，比如 push_back，不能在范围 for 循环中向 vector 对象添加元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用迭代器的二分搜索：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// text必须是有序的
// beg和end表示我们搜索的范围
auto beg = text.begin(), end=text.end();
auto mid = text.begin() + (end-beg)/2; // 初始状态下的中间点
// 当还有元素尚未检查并且我们还没有找到sought时执行循环
while(mid != end &amp;amp;&amp;amp; *mid != sought)
     if (sought &amp;lt; *mid)        // 如果要找的元素在前半部分
         end = mid;            // 新end为旧mid，beg不变
      else                     // 否则，我们要找的元素在后半部分
         beg = mid + 1         // 新beg为旧mid+1，end不变
     mid = beg + (end-beg)/2；  // 同样方法计算新的中间点
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组的维度（元素个数）必须是常量表达式。默认情况下数据元素北默认初始化。字符数组使用字符串字面值初始化时，后面隐藏的 &#39;\0&#39; 会被包含进去，空间不够时报错。数组不允许拷贝和赋值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组本身是对象，存放对象，不存在引用的数组，但存在数组的引用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;unsigned cnt = 42;         //不是常量表达式
constexpr unsigned sz = 42;//常量表达式
int *parr[sz];             //含有42个整型指针的数组
string bad[cnt];;          //错误：cnt不是常量表达式
string strs[get_size()];   //当get_size是constexpr时正确；否则错误
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当数组作为一个 auto 变量的初始值时，推断得到的类型是指针而非数组；使用 decltype 关键字时返回的类型是数组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准库函数 begin () 和 end () 获取数组的首元素指针和尾元素下一指针。两个指针相减的结果类型是 ptrdiff_t 的标准库类型，是带符号类型。如果两个指针分别指向不相关的对象，不能比较他们，未定义行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用数组下标等同于使用指针，同时内置的下标运算（数组下标）可以处理负值，但标准库类型 string 和 vector 的下标运算必须是无符号类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量少使用 C 风格字符串，内存管理麻烦，多用 string，string 的成员函数 c_str () 可以把 string 转化成 char*。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组无法拷贝和赋值，不能用 vector 初始化数组，但可以用数组初始化 vector ，只需之名拷贝区域的首元素地址和尾后地址：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int int_arr[] = &amp;#123;0, 1, 2, 3, 4, 5&amp;#125;；
// ivec有6个元素，分别是intarr中对应元素的副本
vector&amp;lt;int&amp;gt; ivec(begin(int_arr）,end(int_arr))；
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当一个对象被用作右值的时候，用的是对象的值（内容）；当对象被用作左值的时候，用的是对象的身份（在内存中的位置）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符&#34;&gt;#&lt;/a&gt; 运算符&lt;/h3&gt;
&lt;ol start=&#34;45&#34;&gt;
&lt;li&gt;
&lt;p&gt;有 4 种运算符明确规定了运算对象的求值顺序。逻辑与（&amp;amp;&amp;amp;）运算符和逻辑或（||）运算符规定先求左侧运算对象的值，只有当左侧运算对象的值为真 / 假时才继续求右侧运算对象的值。条件（ ?: ）运算符和逗号（ , ）运算符。其他运算符，如 + 、&amp;gt;&amp;gt; 等未规定左右运算对象的求值顺序，先求左右表达式中的哪一个都有可能。如果表达式影响同一对象，求值先后顺序对结果有影响，那么它是一个错误的表达式，将产生未定义行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;布尔值不应该参与运算，大多数运算符会把布尔值提升为 int 类型，true 为 1，求负后为 -1 ，再转回布尔值时仍为 1 ，还是 true。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;求商向 0 取整（直接切除小数部分）。取余时，除了 -m 导致溢出的情况，m % (-n) 等于 m % n，( -m ) % n 等于 -( m % n )，即左右都为负，结果是两个正数取余后结果取反，一正一负，结果等于两个正数取余。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位运算符的运算对象是 “小整数”，它的值会被自动提升成较大的整数类型”，如何处理负数对象的 “符号位” 依赖于机器，而且此时的左移操作可能会改变符号位的值，因此是一种未定义的行为。左移在右侧插入 0。右移时，无符号类型左侧插入 0，带符号类型插入符号位的副本或者值为 0 的二进制位，如何选择视具体情况而定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sizeof 运算符对解引用指针进行运算不会验证指针是否有效，对指针进行运算返回指针本身所占空间大小，对数组返回整个数组所占空间大小。对 sring 或者 vector 运算返回该类型固定部分的大小。sizeof 返回值是一个常量表达式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逗号（ , ）运算符按照从左向右的顺序求值，运算结果是右侧表达式的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无符号和有符号数一起运算时，无符号类型所占位数大于等于有符号类型，则有符号类型转为无符号类型；如果无符号类型所占位数小于有符号类型，比如 long 和 unsigned int （ long 大于 int 时），则 unsigned int 转为 long&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名的强制类型转换具有如下形式： &lt;code&gt;cast-name(expression）&lt;/code&gt; ，static_cast 是一种只要类型不包含底层 const 都可用。const_cast 只能改变运算对象的底层 const， 不能进行类型转换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;switch case 语句中，后面的 case 标签可以使用前面的 case 标签定义过的变量，但是该变量的初始化无效（如果前 case 标签被跳过的话），包括类似 string 的默认初始化。即：不允许跨过变量的初始化语句直接跳转到该变量作用域内的另一个位置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;常用函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用函数&#34;&gt;#&lt;/a&gt; 常用函数&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// cctype 头文件中的函数
isalnur(c)  // 当c是字母或数字时为真
isalpha(c)  // 当c是字母时为真
iscntrl(n)  // 当c是控制字符时为真
isdigit(c)  // 当c是数字时为真
isgraph(c)  // 当c不是空格但可打印时为真
islower(c)  // 当c是小写字母时为真
isprint(c)  // 当c是可打印字符时为真(即c是空格或c具有可视形式)
ispunct(c)  // 当c是标点符号时为真(即c不是控制字符、数字、字母、可打印空白中的一种)
isspace(c)  // 当c是空白时为真(即c是空格、横向制表符、纵向制表符、回车符、换行符、进纸符中的一种)
isupper(c)  // 当c是大写字母时为真
isxdigit(c) // 当c是十六进制数字时为其
tolower(c)  // 如果c是大写字母,输出对应的小写字母:否则原样输出c
toupper(c)  // 如果c是小写字母,输出对应的大写字母:否则原样输出c
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;头文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#头文件&#34;&gt;#&lt;/a&gt; 头文件:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;initializer_list&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;istream&amp;gt;
#include &amp;lt;ostream&amp;gt;
#include &amp;lt;stdexcept&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cstdarg&amp;gt;   // 使用va_list可变参数列表
#include &amp;lt;system_error&amp;gt;
#include &amp;lt;vector&amp;gt;    // 使用vector容器
#include &amp;lt;string&amp;gt;
#include &amp;lt;cstdlib&amp;gt;   // 预处理变量NULL
#include &amp;lt;cctype&amp;gt;    // 使用nullptr，isalnum()，isalpha()等
#include &amp;lt;cstddef&amp;gt;   // 使用size_t,ptrdiff_t
#include &amp;lt;iterator&amp;gt;  // 使用begin(),end()
#include &amp;lt;stdexcept&amp;gt; // 异常类，如runtime_error,p176
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;全局区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局区&#34;&gt;#&lt;/a&gt; 全局区&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;cassert&amp;gt;  // assert,预处理宏
using std::cin;     // using声明，当我们使用cin时，意味着使用的std::cin
using namespace std;// 头文件内容会拷贝到所有引用他的文件里，一般不应包含using声明（易造成名字冲突）

// 如果定义了预处理变量MIN,就继续到#endif，#indef和#indef叫预处理百年
#ifdef MIN
#define MKSTR(x) #x       // &amp;quot;x&amp;quot;
#endif

// 如果没有定义预处理变量MIN,就继续到#endif，一般头文件的预处理变量定义都需要这样写
#ifndef MIN   
#define MIN(a, b) (a &amp;lt; b ? a : b)
#define concat(a, B) a##b // xy
#define NDEBUG // 定了他 assert什么都不做，没定义则指执行运行时检查
#endif

extern const int i = 123; // a文件里定义并初始化i，加extern使其能被其他文件使用
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据结构&#34;&gt;#&lt;/a&gt; 数据结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;stack 容器&lt;/p&gt;
&lt;p&gt;头文件，c 在 std 命名空间。stack 容器适配器的模板有两个参数。第一个参数是存储对象的类型，第二个参数是底层容器的类型。stack 的底层容器默认是 deque 容器，因此模板类型其实是 stack。通过指定第二个模板类型参数，可以使用任意类型的底层容器，只要它们支持 back ()、push_back ()、pop_back ()、empty ()、size () 这些操作。下面展示了如何定义一个使用 list 的堆栈：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;stack&amp;lt;string&amp;gt; words1;   // 省略第一个参数，用默认的底层容器deque&amp;lt;T&amp;gt;实现
stack&amp;lt;string, list&amp;lt;string&amp;gt;&amp;gt; words2  // 底层容器使用list&amp;lt;T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建堆栈时，不能用对象来初始化，但是可以用另一个容器来初始化，只要堆栈的底层容器类型和这个容器的类型相同，且必须使用圆括号。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;list&amp;lt;double&amp;gt; values &amp;#123;1.414, 3.14159265, 2.71828&amp;#125;;
stack&amp;lt;double, list&amp;lt;double&amp;gt;&amp;gt; my_stack (values);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第二条语句生成了一个包含 value 元素副本的 my_stack。这里不能在 stack 构造函数中使用初始化列表，必须使用圆括号。如果没有在第二个 stack 模板类型参数中将底层容器指定为 list，那么底层容器可能是 deque，这样就不能用 list 的内容来初始化 stack；只能接受 deque。&lt;/p&gt;
&lt;p&gt;stack 模板定义了拷贝构造函数，因而可以复制现有的 stack 容器：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;stack copy_stack &amp;#123;my_stack&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;堆栈操作：(T 为栈中元素类型)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;push (const T&amp;amp; obj) 可以将对象副本压入栈顶。这是通过调用底层容器的 push_back () 函数完成的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pop () 弹出栈顶元素但没有返回它。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;top () 返回一个栈顶元素的引用但没有弹出，类型为 T&amp;amp;。如果栈为空，返回值未定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;size () 返回栈中元素的个数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;empty () 在栈中没有元素的情况下返回 true。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;emplace () 用传入的参数调用构造函数，在栈顶生成对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;swap (stack &amp;amp; other_stack) 将当前栈中的元素和参数中的元素交换。参数所包含元素的类型必须和当前栈的相同。对于 stack 对象有一个特例化的全局函数 swap () 可以使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;类模板&lt;/p&gt;
&lt;p&gt;vector 定义在头文件中，需要包含，并位于 std 命名空间中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;double&amp;gt; values;   // 创建空容器
vector&amp;lt;double&amp;gt; values1(20， 1.0); // 开始就有20个int,初始值均为1.0,没有第二个参数初始值默认均为0
vector&amp;lt;int&amp;gt; values2&amp;#123;1,2,3,4,2,1&amp;#125;; // 指定元素个数和初始值
vector&amp;lt;int&amp;gt; values3(values2);  // 创建和alces相同的容器
vector&amp;lt;int&amp;gt; values4(begin(value2,begin(v。alue2)+3)) // 使用指针或者迭代器来指定初始值范围
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vector 容器包含的成员函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;begin()	    // 返回指向容器中第一个元素的迭代器。
end()	    // 返回指向容器最后一个元素所在位置后一个位置的迭代器。
front()	    // 返回第一个元素的引用。
back()	    // 返回最后一个元素的引用。
data()	    // 返回指向容器中第一个元素的指针。
assign()    // 用新元素替换原有内容。
push_back()	// 在序列的尾部添加一个元素。
pop_back()	// 移出序列尾部的元素。
insert()	// 在指定的位置插入一个或多个元素。
erase()	    // 移出一个元素或一段元素。
clear()	    // 移出所有的元素，容器大小变为 0。
rbegin()  // 返回指向最后一个元素的迭代器。
rend()	  // 返回指向第一个元素所在位置前一个位置的迭代器。
cbegin()  // 和 begin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
cend()	  // 和 end() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
crbegin() // 和 rbegin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
crend()	  // 和 rend() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
size()	  // 返回实际元素个数。
max_size()// 返回元素个数的最大值。这通常是一个很大的值，一般是 2^32-1，所以我们很少会用到这个函数。
resize()  // 改变实际元素的个数。
capacity()// 返回当前容量。
empty()	  // 判断容器中是否有元素，若无元素，则返回 true；反之，返回 false。
reserve() // 增加容器的容量。
shrink _to_fit()  // 将内存减少到等于当前元素实际所使用的大小。
operator[ ]	      // 重载了 [ ] 运算符，可以向访问数组中元素那样，通过下标即可访问甚至修改 vector 容器中的元素。
at()	        // 使用经过边界检查的索引访问元素。
swap()	        // 交换两个容器的所有元素。
emplace()	    // 在指定的位置直接生成一个元素。
emplace_back()	// 在序列尾部生成一个元素。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哈希表&lt;/p&gt;
&lt;p&gt;头文件 &lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt; ，在 std 名命名空间中。它将数据存储为键值对，其中键是唯一的。 声明和初始化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;unordered_map&amp;lt;string, int&amp;gt; map1
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="C++ Primer笔记" scheme="http://yuanmxc.site/categories/C-Primer%E7%AC%94%E8%AE%B0/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E4%B8%8D%E6%88%90%E6%96%87/SQL/</id>
        <title>SQL</title>
        <link rel="alternate" href="http://yuanmxc.site/%E4%B8%8D%E6%88%90%E6%96%87/SQL/"/>
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查询表的数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本查询：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;表名&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​		ELECT 是关键字，表示将要执行一个查询，* 表示 “所有列”，FROM 表示将要从哪个表查询&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件查询：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;表名&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;条件表达式&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; students &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; score &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;AND&lt;/span&gt; gender &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​		多个条件表达式可以用 &lt;code&gt;AND&lt;/code&gt;  或者 &lt;code&gt;OR&lt;/code&gt;  连接 &lt;code&gt;&amp;lt;条件1&amp;gt; AND/OR &amp;lt;条件2&amp;gt;&lt;/code&gt; ， &lt;code&gt;NOT &amp;lt;条件&amp;gt;&lt;/code&gt; ，表示 “不符合该条件” 的记录&lt;br /&gt;
​		使用 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;  判断不相等，使用 &lt;code&gt;=&lt;/code&gt;  判断相等，使用 &lt;code&gt;LIKE&lt;/code&gt;  判断相似， &lt;code&gt;name LIKE &#39;ab%&#39;&lt;/code&gt; ， &lt;code&gt;%&lt;/code&gt;  表示任意字符，例如 &lt;code&gt;&#39;ab%&#39;&lt;/code&gt;  将匹配 &lt;code&gt;&#39;ab&#39;&lt;/code&gt; ， &lt;code&gt;&#39;abc&#39;&lt;/code&gt; ， &lt;code&gt;&#39;abcd&#39;&lt;/code&gt; ，要组合三个或者更多的条件，就需要用小括号 &lt;code&gt;()&lt;/code&gt;  表示如何进行条件运算，否则，优先级： &lt;code&gt;NOT&amp;gt;AND&amp;gt;OR&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;投影查询：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; 列&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 列&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 列&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;表名&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 从 students 表中返回 id、score 和 name 这三列：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; score&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; students&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 可以给每一列起一个别名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; 列&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; 别名&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 列&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; 别名&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 列&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; 别名&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;表名&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 以下 SELECT 语句将列名 score 重命名为 points，而 id 和 name 列名保持不变：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; score points&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; students&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 投影查询同样可以接 WHERE 条件，实现复杂的查询：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; score points&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; students &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; gender &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排序：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 按 score 从低到高：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; score &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; students &lt;span class=&#34;token keyword&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; score&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 默认排序是 ASC “升序”，ASC 可以省略，末尾加上 DESC 表示 “倒序”：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; score &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; students &lt;span class=&#34;token keyword&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; score &lt;span class=&#34;token keyword&#34;&gt;DESC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 使用 ORDER BY score DESC, gender 表示先按 score 列倒序，如果有相同分数的，再按 gender 列排序：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; score &lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; students &lt;span class=&#34;token keyword&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; score &lt;span class=&#34;token keyword&#34;&gt;DESC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 如果有 WHERE 子句，那么 ORDER BY 子句要放到 WHERE 子句后面：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; score&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; students&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; class_id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;BY&lt;/span&gt; score &lt;span class=&#34;token keyword&#34;&gt;DESC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;分页查询，聚合查询，多表查询，连接查询略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;插入数据：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;表名&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;字段&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 字段&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;值&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 值&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 向 students 表插入一条新记录，先列举出需要插入的字段名称，然后在 VALUES 子句中依次写出对应字段的值：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; students &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;class_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; score&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;大牛&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改数据：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;表名&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; 字段&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;值&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 字段&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;值&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 更新 students 表 id=1 的记录的 name 和 score 这两个字段，先写出 UPDATE students SET name=&#39; 大牛 &#39;, score=66，然后在 WHERE 子句中写出需要更新的行的筛选条件 id=1：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UPDATE&lt;/span&gt; students &lt;span class=&#34;token keyword&#34;&gt;SET&lt;/span&gt; name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;大牛&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; score&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;WHERE&lt;/span&gt; id&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tLw==&#34;&gt;廖雪峰的官方网站&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="不成文" scheme="http://yuanmxc.site/categories/unwritten/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E4%B8%8D%E6%88%90%E6%96%87/%E9%9A%8F%E8%AE%B0/</id>
        <title>随记</title>
        <link rel="alternate" href="http://yuanmxc.site/%E4%B8%8D%E6%88%90%E6%96%87/%E9%9A%8F%E8%AE%B0/"/>
        <content type="html">&lt;h2 id=&#34;真寻bot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#真寻bot&#34;&gt;#&lt;/a&gt; 真寻 bot：&lt;/h2&gt;
&lt;p&gt;docker pull ubuntu 下镜像&lt;/p&gt;
&lt;p&gt;docker run -it --network=host --name=&amp;quot;zhenxunbot&amp;quot; ubuntu 本机网络启动&lt;/p&gt;
&lt;p&gt;passwd 设置 root 密码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每次进 docker 都要设置代理：&lt;/p&gt;
&lt;p&gt;export ALL_PROXY=&#39;socks5://127.0.0.1:7890&#39;&lt;br /&gt;
export https_proxy=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzEyNy4wLjAuMTo3ODkw&#34;&gt;http://127.0.0.1:7890&lt;/span&gt;&amp;quot;&lt;br /&gt;
curl &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NpcC5jYw==&#34;&gt;cip.cc&lt;/span&gt; 查看当前网络代理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装所需软件&lt;/p&gt;
&lt;p&gt;apt update&lt;br /&gt;
apt install git vim curl python3 python3-pip&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;换源：&lt;/p&gt;
&lt;p&gt;vim etc/apt/sources.list，加入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 gocq，下载源码，启动，选 3，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 &lt;code&gt;config.yml&lt;/code&gt;  文件，QQ 号和 universal: ws://your_websocket_universal.server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vim device.json 换协议为 2，连手机热点，扫码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;装数据库 ：apt install postgresql postgresql-contrib&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动数据库：service postgresql start  开机自启：update-rc.d postgresql defaults&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建数据库和用户&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;su&lt;/span&gt; - postgres  &lt;span class=&#34;token comment&#34;&gt;# 切换用户&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;psql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 用户名↓              # 密码↓&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# CREATE USER uname WITH PASSWORD &#39;zhenxun&#39;;      # 创建用户（可不执行）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                   &lt;span class=&#34;token comment&#34;&gt;#密码↓&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;alter user postgres with password &lt;span class=&#34;token string&#34;&gt;&#39;zhenxun_bot&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 修改 postgres 的密码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# 数据库名称↓    所有者 (用户名)↓&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;CREATE DATABASE zhenxun_bot OWNER postgres&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;token comment&#34;&gt;# 创建数据库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;q &lt;span class=&#34;token comment&#34;&gt;# 退出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;exit&lt;/p&gt;
&lt;p&gt;su - root 切回&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载真寻 bot 源码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装依赖（在真寻 bot 目录内）：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pip3 &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; poetry     &lt;span class=&#34;token comment&#34;&gt;# 使用 poetry 管理 python 包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;poetry &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt;          &lt;span class=&#34;token comment&#34;&gt;# 安装依赖&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;poetry shell            &lt;span class=&#34;token comment&#34;&gt;# 进入虚拟环境（以下在虚拟环境下执行）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pip3 &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; playwright&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;playwright &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; chromium&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;playwright install-deps chromium&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置超级用户，打开 &lt;strong&gt;.env.dev&lt;/strong&gt; 文件，在 &lt;code&gt;SUPERUSERS&lt;/code&gt;  中添加自己的 QQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;填写数据库数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#填写数据库数据&#34;&gt;#&lt;/a&gt; 填写数据库数据&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SUPERUSERS=[&#34;123456789&#34;]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;填写数据库数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;configs&lt;/code&gt; &lt;/strong&gt; 目录并打开 &lt;strong&gt; &lt;code&gt;config.py&lt;/code&gt; &lt;/strong&gt; 文件&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bind: str = &#34;&#34;  # 数据库连接链接&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sql_name: str = &#34;postgres&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user: str = &#34;&#34;  # 数据用户名&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;password: str = &#34;&#34;  # 数据库密码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;address: str = &#34;&#34;  # 数据库地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;port: str = &#34;&#34;  # 数据库端口&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;database: str = &#34;&#34;  # 数据库名称&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;修改为：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bind: str = &#34;&#34;  # 数据库连接链接&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sql_name: str = &#34;postgres&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user: str = &#34;postgres&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;password: str = &#34;zhenxun_bot&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;address: str = &#34;127.0.0.1&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;port: str = &#34;5432&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;database: str = &#34;zhenxun_bot&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动真寻&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依赖模块缺少，比如 nonobot，tortoise，adapter，一般是依赖问题，是执行 poetry shell 时出现报错，如果报错为：PyYAML 安装失败，就修改 pyprojecr.toml 文件（包含所有要下载的依赖）中的 PyYAML=“5.3.0”，然后再次执行 poetry install，如果说有红字不匹配，执行 poetry lock --no-update 后再次执行 poetry install，所有依赖安装完毕后运行，没有问题，均是在虚拟环境中。 &lt;code&gt;poetry show&lt;/code&gt;  会显示已安装和未安装的依赖以及版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开机需保证：go-cq 正常运行（如果报红字，说明还有一个 go-cq 在跑，把它关掉），&lt;/p&gt;
&lt;p&gt;数据库启动，在虚拟环境中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;poetry &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt;          &lt;span class=&#34;token comment&#34;&gt;# 安装依赖&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;poetry shell            &lt;span class=&#34;token comment&#34;&gt;# 进入虚拟环境&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python3 bot.py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;va_list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#va_list&#34;&gt;#&lt;/a&gt; va_list&lt;/h2&gt;
&lt;p&gt;是一个 C++ 中用于处理可变数量参数的机制。它是一个指向可变参数列表的类型，用于在函数中访问和处理不定数量的参数。&lt;/p&gt;
&lt;p&gt;具体来说，va_list 是一个指向参数列表的指针，它是通过标准头文件中的宏和函数来操作的。使用 va_list，我们可以在函数中按顺序访问和提取可变数量的参数。&lt;/p&gt;
&lt;p&gt;下面是一个简单的示例，演示了如何使用 va_list 来处理可变数量的参数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;cstdarg&amp;gt;
#include &amp;lt;iostream&amp;gt;

void printValues(int numArgs, ...)
&amp;#123;
    va_list args;
    va_start(args, numArgs);

    for (int i = 0; i &amp;lt; numArgs; ++i)
    &amp;#123;
        int value = va_arg(args, int);
        std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    &amp;#125;

    va_end(args);
&amp;#125;

int main()
&amp;#123;
    printValues(3, 1, 2, 3); // 输出: 1 2 3

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的示例中，printValues 函数接收一个整数参数 numArgs，它表示后续可变数量参数的个数。通过使用 va_list，我们可以在函数中使用 va_start 宏来初始化可变参数列表，然后使用 va_arg 宏按顺序提取参数的值，直到达到指定的参数个数。最后，我们使用 va_end 宏来清理可变参数列表。&lt;/p&gt;
&lt;p&gt;需要注意的是，使用 va_list 需要小心处理参数类型和个数的一致性，以及遵循正确的使用方式，以避免出现未定义行为或错误。&lt;/p&gt;
&lt;h2 id=&#34;const-noexcept-和-final&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#const-noexcept-和-final&#34;&gt;#&lt;/a&gt; const noexcept 和 final&lt;/h2&gt;
&lt;p&gt;const, noexcept, 和 final 是 C++ 中的关键字，用于修饰函数或类的特性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;const：它用于修饰函数或类的成员函数，表示该函数不会修改对象的状态。在一个 const 成员函数中，不能修改类的非 mutable 成员变量，也不能调用非 const 成员函数，以确保函数的调用不会对对象的状态造成改变。&lt;/li&gt;
&lt;li&gt;noexcept：它用于修饰函数，表示该函数不会抛出异常。在 C++ 中，函数可以声明为 noexcept 以指示其不会引发异常。这对于编写异常安全的代码以及进行性能优化很有用。&lt;/li&gt;
&lt;li&gt;final：它用于修饰类或虚函数，表示该类不可被继承或该虚函数不可被派生类重写。当一个类被声明为 final 时，它不能作为基类，不能被其他类继承。当一个虚函数被声明为 final 时，派生类将不能重写该虚函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些关键字可以帮助程序员在代码中明确表示其意图，并在一定程度上增加代码的可读性和可靠性。&lt;/p&gt;
</content>
        <category term="不成文" scheme="http://yuanmxc.site/categories/unwritten/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E6%88%90%E6%96%87/Hexo+Github%20Pages%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
        <title>Hexo+Github Pages 搭建个人博客</title>
        <link rel="alternate" href="http://yuanmxc.site/%E6%88%90%E6%96%87/Hexo+Github%20Pages%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装 Hexo&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 安装 node.js 和 npm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; pacman &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; nodejs &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 安装 hexo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-g&lt;/span&gt; hexo-cli&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前期准备&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Hexo 配置&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 新建一个存放博客相关文件的文件夹（以 your_blog 为例）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo init your_blog &lt;span class=&#34;token comment&#34;&gt;# 初始化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; your_blog&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo new “HelloWorld” &lt;span class=&#34;token comment&#34;&gt;# 生成 HelloWorld.md 文件（你的文章），存放在 /your_blogyour_blog/sources/_post/ 目录下&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo generate &lt;span class=&#34;token comment&#34;&gt;# 将 /your_blog/sources/_post/ 目录下的 Markdown 文件解析成可以使用浏览器查看的 HTML 文件，存在 blog/public 目录下&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo server &lt;span class=&#34;token comment&#34;&gt;# 在本地运行服务，可以在提示的网址进行预览博客&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hexo 配合 Github Page&lt;/p&gt;
&lt;p&gt;在 /your_blog/ 下安装使用 Git 进行部署所需的依赖项&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; hexo-deployer-git &lt;span class=&#34;token parameter variable&#34;&gt;--save&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 /your_blog/_config.yml 中修改 deploy 属性 (注意：之后有空格)&lt;/p&gt;
&lt;figure class=&#34;highlight yml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;你的仓库地址&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;如果有ssh推荐使用ssh&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; master&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo deploy &lt;span class=&#34;token comment&#34;&gt;# 将本地文件推送到 Github 仓库 同时更新你的 Github page 个人博客展示界面&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以后更新博客的流程：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo new “HelloWorld” &lt;span class=&#34;token comment&#34;&gt;# 生成 HelloWorld.md 文件（你的文章），或者手动在 your_blog/sources/_post/ 目录下创建 md，并编辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo g &lt;span class=&#34;token comment&#34;&gt;# 将 Markdown 文件解析成 HTML 文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo server &lt;span class=&#34;token comment&#34;&gt;# 本地预览（可无）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo d &lt;span class=&#34;token comment&#34;&gt;# 推送更新&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;短时间内对本地配置文件进行修改后，推荐使用 &lt;code&gt;Hexo cl&lt;/code&gt;  命令来清除缓存，之后在执行 &lt;code&gt;Hexo s&lt;/code&gt;  来查看修改后的效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你的 Github 本地仓库应该位于 your_blog 目录下，不要更改，博客网站就是仓库中的文件生成的。执行 hexo d 命令时会帮你更改仓库中的文件，不需要管同时，执行 hexo 命令需要在 your_blog 目录下进行操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Github 绑定购买的自定义域名（如有）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更换主题 推荐主题: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=&#34;&gt;Hexo 主题 Shoka &amp;amp; multi-markdown-it 渲染器使用说明&lt;/span&gt;，或者自行下载喜欢的主题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一般主题都会有详细的配置和插件配置教程，以 shoka 为例，大体过程如下：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; your_blog &lt;span class=&#34;token comment&#34;&gt;# 进你的博客目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka &lt;span class=&#34;token comment&#34;&gt;# 克隆 github 仓库到 /blog/themes/ 下&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主题目录内一般有 example 文件夹，提供配置文件的 demo 供参考。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装依赖插件&lt;/p&gt;
&lt;p&gt;按照具体所给教程进行，可能不需要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改配置文件 your_blog/_config.yml ，把 theme 改为 shoka。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新生成静态文件并推送。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo generate &lt;span class=&#34;token comment&#34;&gt;# 将 /your_blog/sources/_post/ 目录下的 Markdown 文件解析成可以使用浏览器查看的 HTML 文件，存在 blog/public 目录下&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo server &lt;span class=&#34;token comment&#34;&gt;# 本地预览（可无）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo deploy &lt;span class=&#34;token comment&#34;&gt;# 将本地已有的文件推送到 Github 仓库 同时更新你的 Github page 个人博客展示界面&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="成文" scheme="http://yuanmxc.site/categories/written/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E6%88%90%E6%96%87/TCP%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</id>
        <title>TCP的可靠数据传输</title>
        <link rel="alternate" href="http://yuanmxc.site/%E6%88%90%E6%96%87/TCP%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/"/>
        <content type="html">&lt;h2 id=&#34;简述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简述&#34;&gt;#&lt;/a&gt; 简述&lt;/h2&gt;
&lt;p&gt;​	   众所周知，TCP 是传输层中一种面向连接的、可靠的、基于字节流的通信协议，是网络通信中十分重要的桥梁。本文集中于对可靠的数据传输、流量控制以及拥塞控制三个内容的简单描述，需要读者对 TCP 有一定了解。&lt;/p&gt;
&lt;h2 id=&#34;可靠的数据传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可靠的数据传输&#34;&gt;#&lt;/a&gt; 可靠的数据传输&lt;/h2&gt;
&lt;h3 id=&#34;超时重传-快速重传-sack重传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超时重传-快速重传-sack重传&#34;&gt;#&lt;/a&gt; 超时重传、快速重传、sack 重传&lt;/h3&gt;
&lt;p&gt;​       我们都知道，在 TCP 中，当发送端的数据到达接收端时，接收端会返回一个确认应答消息，表示已收到消息。但过程往往不会这么顺利，数据可能在错综复杂的网络中丢失。此时，就需要利用重传机制解决。&lt;/p&gt;
&lt;h4 id=&#34;超时重传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超时重传&#34;&gt;#&lt;/a&gt; 超时重传：&lt;/h4&gt;
&lt;p&gt;​		当发送端发出一个数据包后，会启动一个定时器（&lt;strong&gt;超时重传时间 &lt;code&gt;RTO&lt;/code&gt; &lt;/strong&gt;），，等待接收端确认收到这个数据包。如果没有在定时范围内收到接收端的确认报文，发送端将重发数据包。这里有两种情况：发送的数据包丢失或者确认应答丢失。&lt;/p&gt;
&lt;p&gt;​		显然， &lt;code&gt;RTO&lt;/code&gt;  应该略大于正常情况下发送端数据发送时刻与发送端收到确认报文时刻的差值（包的往返时间 &lt;code&gt;RTT&lt;/code&gt; ），但由于网络环境的不确定性， &lt;code&gt;RTT&lt;/code&gt;  在不断变化，因此 &lt;code&gt;RTO&lt;/code&gt;  的值实际上需要很复杂的计算才能得以确定，这里不多做展开。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;超时间隔加倍&lt;/strong&gt;：每当遇到一次超时重传的时候，都会将下一次超时时间间隔设为先前值的两倍。两次超时，就说明网络环境差，不宜频繁反复发送。&lt;/p&gt;
&lt;h4 id=&#34;快速重传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速重传&#34;&gt;#&lt;/a&gt; 快速重传：&lt;/h4&gt;
&lt;p&gt;超时重传也有一些问题，报文段丢失后的等待重传时间相对较长，效率较低。因此又衍生出了&lt;strong&gt;快速重传&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		先介绍一下&lt;strong&gt;累计确认机制&lt;/strong&gt;：当接收端收到比期望序号大的报文段时，会重复发送最近一次确认的报文段的确认信号，称之为冗余 ACK（duplicate ACK）。如图所示，报文段 1 成功接收并被确认 ACK 2，接收端的期待序号为 2，当报文段 2 丢失，报文段 3 失序到来，与接收端的期望不匹配，接收端重复发送冗余 ACK 2。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/home/origin/Code/repository/Note/All_picture/TCP%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/11151952-9b8206ec45e63ba1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​		这样，如果在 &lt;code&gt;RTO&lt;/code&gt;  范围内，发送端会收到连续的&lt;strong&gt;三个重复冗余 ACK&lt;/strong&gt;（实际上收到 4 个相同 ACK，第一个是正常的，后三个才是冗余的），发送端便知晓哪个报文段在传输过程中丢失了，于是重发该报文段，不需要等待 &lt;code&gt;RTO&lt;/code&gt;  再重传，提高了效率。这便是&lt;strong&gt;快速重传机制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		这里采用三次冗余 ACK 的原因也很耐人寻味，我们知道 TCP 包是封装在 IP 包内的，IP 包在传输时会乱序，因此 TCP 包到达接收端也是乱序的，这也会造成接收端发送冗余 ACK 给发送端。因此我们不能仅凭某一两次的冗余 ACK 就进行重传。选取三次是经过统计所得出的一个估计值，均衡考虑的最优结果。&lt;/p&gt;
&lt;h4 id=&#34;sack重传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sack重传&#34;&gt;#&lt;/a&gt; SACK 重传&lt;/h4&gt;
&lt;p&gt;​		快速重传解决了超时时间较长的问题，我们还有另外一个问题：&lt;strong&gt;重传的时候，是重传一个，还是重传所有&lt;/strong&gt;。传一个会导致多次触发快速重传，每个丢失的报文都需要三次冗余 ACK，传所有报文时，如果后面的部分报文已经收到，会造成重复发送，导致资源浪费。因此有了 ** &lt;code&gt;SACK&lt;/code&gt;  方法 **。&lt;/p&gt;
&lt;p&gt;​		在 TCP 头部选项字段里加一个  &lt;code&gt;SACK&lt;/code&gt;  的东西，发送端可以根据它知道哪些数据收到了，哪些数据没收到，从而只重传丢失的数据。&lt;/p&gt;
&lt;p&gt;​		基于 &lt;code&gt;SACK&lt;/code&gt;  方法，还有一种 ** &lt;code&gt;Duplicate SACK&lt;/code&gt; ** 机制又称 &lt;strong&gt; &lt;code&gt;D-SACK&lt;/code&gt; &lt;/strong&gt;，它使用 &lt;code&gt;SACK &lt;/code&gt; 方法来告诉「发送方」有哪些数据被重复接收了。&lt;/p&gt;
&lt;p&gt;​		当连续发送报文时，如果一个报文因网络而延迟到达（已经触发快速重传继续传输后续报文时接收端收到之前延时的报文），回应的 ack 中的 &lt;code&gt;sack&lt;/code&gt;  就会告诉发送端接收端重复接收了之前已经接收到的报文（即&lt;strong&gt;知道该报文延迟&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;​		通过这种方式，发送方还可以知道是&lt;strong&gt;自己发送的报文丢失&lt;/strong&gt;还是&lt;strong&gt;接收方回应的 ACK 确认报文丢失&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量控制&#34;&gt;#&lt;/a&gt; 流量控制&lt;/h2&gt;
&lt;p&gt;​		由于接收方和发送方的条件不同会会出现发送方数据发送过快，但接收方来不及接受，导致数据丢失的问题，基于此， &lt;code&gt;TCP&lt;/code&gt;  出现了&lt;strong&gt;流量控制&lt;/strong&gt;机制。&lt;/p&gt;
&lt;p&gt;​		TCP 依靠&lt;strong&gt;滑动窗口&lt;/strong&gt;进行流量控制，在 TCP 中有一个字段叫 &lt;code&gt;window&lt;/code&gt; ，用来&lt;strong&gt;让接收端告诉发送端自己还有多少缓冲区可以接收数据&lt;/strong&gt;。这样发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。类似于一个先进先出的队列。同时发送方也会有一个滑动窗口，表示自己发送的数据包是否已经收到了接收方的确认报文。双方通过报文的 &lt;code&gt;window&lt;/code&gt;  字段告诉对方自己目前的窗口大小。&lt;/p&gt;
&lt;p&gt;发送方的滑动窗口示意：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/home/origin/Code/repository/Note/All_picture/TCP%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/18-1676462686327-6.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接收方的滑动窗口示意：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/home/origin/Code/repository/Note/All_picture/TCP%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/image-20230215201601943.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制&#34;&gt;#&lt;/a&gt; 拥塞控制&lt;/h2&gt;
&lt;p&gt;​		在网络出现拥堵时，如果继续发送大量数据包，可能会导致数据包时延、丢失等，这时 TCP 就会重传数据，但是一重传就会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，导致恶性循环，因此有了&lt;strong&gt;拥塞控制&lt;/strong&gt;来避免发送端的数据填满网络造成拥堵。主要通过三个算法来实现，分别是：&lt;strong&gt;慢开始 (slow-start)&lt;/strong&gt;、&lt;strong&gt;拥塞避免 (congestion avoidance)&lt;/strong&gt;、和&lt;strong&gt;快恢复 (fast recovery)&lt;/strong&gt;。。&lt;/p&gt;
&lt;p&gt;​		首先我们需要一个状态变量来表示网络的拥堵状况 ——&lt;strong&gt; 拥塞窗口&lt;/strong&gt;（ &lt;code&gt;cwnd&lt;/code&gt; ），只要网络中没有出现阻塞，窗口就会增大，网络中出现阻塞，窗口就会减小。一个传输轮次传输 &lt;code&gt;cwnd&lt;/code&gt;  个报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;慢启动&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​		当发送端每收到 1 个确认 ACK（一轮可能收到多个），拥塞窗口的大小就会加 1。这使得拥塞窗口呈指数级增长（ &lt;code&gt;cwnd&lt;/code&gt;  为 2 时，一轮收到 2 个 ACK， &lt;code&gt;cwnd&lt;/code&gt; + 2 = 4； &lt;code&gt;cwnd&lt;/code&gt;  为 4 时，一轮收到 4 个 ACK ,  &lt;code&gt;cwnd&lt;/code&gt;  + 4 = 8）。&lt;/p&gt;
&lt;p&gt;​		当 cwnd 的值超过慢启动门限（ssthresh 一般情况下为 65535 字节）时，慢启动算法停止，使用&lt;strong&gt;拥塞避免算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥塞避免&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​		每收到一个 ACK 报文，拥塞窗口 &lt;code&gt;cwnd&lt;/code&gt;  增加 &lt;code&gt;1/cwnd&lt;/code&gt; 。这使得拥塞窗口呈线性增长（ &lt;code&gt;cwnd&lt;/code&gt;  为 10 时，一轮收到 10 个 ACK， &lt;code&gt;cwnd&lt;/code&gt; + 10/10 = 11； &lt;code&gt;cwnd&lt;/code&gt;  为 11 时，一轮收到 11 个 ACK ,  &lt;code&gt;cwnd&lt;/code&gt;  + 11/11 = 12）。&lt;/p&gt;
&lt;p&gt;​		当&lt;strong&gt;超时重传拥塞&lt;/strong&gt;发生以后， &lt;code&gt;ssthresh&lt;/code&gt;  设置为 &lt;code&gt;cwnd/2&lt;/code&gt; 。 &lt;code&gt;cwnd&lt;/code&gt;  重置为 1。&lt;/p&gt;
&lt;p&gt;​		当&lt;strong&gt;快速重传拥塞&lt;/strong&gt;发生以后， &lt;code&gt;cwnd&lt;/code&gt;  =  &lt;code&gt;cwnd/2&lt;/code&gt; ， &lt;code&gt;ssthresh = cwnd&lt;/code&gt;  进入快速恢复算法，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快恢复算法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​		进入快恢复算法时，已经发生了&lt;strong&gt;快速重传拥塞&lt;/strong&gt;， &lt;code&gt;cwnd&lt;/code&gt;  和 &lt;code&gt;ssthresh&lt;/code&gt;  已被更新，之后进行如下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;拥塞窗口 &lt;code&gt;cwnd = ssthresh + 3&lt;/code&gt; （表示有三个数据包被收到）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重传丢失的数据包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果收到的 ACK 是重复的，cwnd 增加 1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果收到新数据的 ACK，把拥塞窗口设置为第 1 步中 ssthresh 的值，因为 ACK 已经确认了新数据，快速恢复过程可以结束，可以再次进入拥塞避免阶段。&lt;/p&gt;
&lt;p&gt;下图表示了所有的拥塞算法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/home/Yuanmxc/Code/repository/Note/All_picture/TCP%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/image-20230215210457706.png&#34; alt=&#34;image-20230215210457706&#34; /&gt;&lt;/p&gt;
</content>
        <category term="成文" scheme="http://yuanmxc.site/categories/written/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
        <title>算法学习笔记</title>
        <link rel="alternate" href="http://yuanmxc.site/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;h2 id=&#34;总览&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总览&#34;&gt;#&lt;/a&gt; 总览&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;7 个数据结构&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;链表&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;哈希表&lt;/li&gt;
&lt;li&gt;二叉树&lt;/li&gt;
&lt;li&gt;堆&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;10 个算法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;li&gt;排序&lt;/li&gt;
&lt;li&gt;二分查找&lt;/li&gt;
&lt;li&gt;搜索&lt;/li&gt;
&lt;li&gt;哈希算法&lt;/li&gt;
&lt;li&gt;贪心算法&lt;/li&gt;
&lt;li&gt;分治算法&lt;/li&gt;
&lt;li&gt;回溯算法&lt;/li&gt;
&lt;li&gt;动态规划&lt;/li&gt;
&lt;li&gt;字符串匹配算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据结构的基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据结构的基本操作&#34;&gt;#&lt;/a&gt; 数据结构的基本操作&lt;/h2&gt;
&lt;p&gt;数据结构的基本操作包括：增删查改，即遍历和访问。&lt;/p&gt;
&lt;p&gt;数据结构的遍历和访问的两种形式：线性、非线性，线性以 for/while 迭代为代表，非线性以递归为代表。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数组遍历框架（线性迭代）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void traverse(vector&amp;lt;int&amp;gt; arr)&amp;#123;
    for(int i = 0; i &amp;lt; arr.size(); i++)&amp;#123;
        // 迭代访问每个元素arr[i]
    &amp;#125;
&amp;#125;

void traverse(vector&amp;lt;int&amp;gt; arr)&amp;#123;    
    for(auto &amp;amp;i : arr)&amp;#123;
        // 迭代访问每个元素i
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链表遍历框架（迭代或者递归）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// 基本的单链表节点
class ListNode &amp;#123;
    public:
        int val;
        ListNode *next;
&amp;#125;;

void traverse(ListNode head)&amp;#123;
    for(ListNode *p = heda; p != nullptr; p = p-&amp;gt;next)&amp;#123;
        // 迭代访问 p-&amp;gt;val
    &amp;#125;
&amp;#125;

void traverse(ListNode head)&amp;#123;
    traverse(head-&amp;gt;next);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二叉树遍历框架，典型的非线性递归遍历结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// 基本的二叉树节点
struct TreeNode &amp;#123;
    int val;
    TreeNode* left;
    TreeNode* righe;
&amp;#125;;

void traverse(TreeNode* root) &amp;#123;
    // 递归访问二叉树每个节点root
    traverse(root-&amp;gt;left):
    traverse(root-&amp;gt;right);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二叉树扩展为 N 叉树遍历结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// 基本的 N 叉树节点
class TreeNode &amp;#123;
    int val;
    vector&amp;lt;TreeNode*&amp;gt; children;
&amp;#125;;

void traverse(TreeNode *root) &amp;#123;
    // 递归访问 N 叉树每个节点
    for (TreeNode *child : root-&amp;gt;children)
        traverse(child);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;刷题顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#刷题顺序&#34;&gt;#&lt;/a&gt; 刷题顺序：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数组、链表相关：单链表翻转、前缀和数组、二分搜索等基础算法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二叉树。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回溯，动态规划、回溯算法等面试常考。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二叉树框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树框架&#34;&gt;#&lt;/a&gt; 二叉树框架&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++5&#34;&gt;void traverse(TreeNode *root) &amp;#123;
    // 前序位置
    traverse(root-&amp;gt;left);
    // 中序位置
    traverse(root-&amp;gt;right);
    // 后序位置
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="数据结构和算法" scheme="http://yuanmxc.site/categories/Data-structures-algorithms/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E7%AC%94%E8%AE%B0/6.s081%E7%AC%94%E8%AE%B0/</id>
        <title>6.s081笔记</title>
        <link rel="alternate" href="http://yuanmxc.site/%E7%AC%94%E8%AE%B0/6.s081%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;h2 id=&#34;课程第一节-指导书第一-二章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课程第一节-指导书第一-二章&#34;&gt;#&lt;/a&gt; 课程第一节 &amp;amp;&amp;amp; 指导书第一、二章&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;操作系统一般需要做到：
&lt;ul&gt;
&lt;li&gt;抽象硬件，实现了高层级的接口和抽象，例如进程，文件系统。&lt;/li&gt;
&lt;li&gt;在多个应用程序之间共用硬件资源，多个程序能够互不干扰地运行，multiplex（多路复用）。&lt;/li&gt;
&lt;li&gt;多个程序之间互不干扰。隔离性（Isolation），不同的活动之间不能相互干扰。&lt;/li&gt;
&lt;li&gt;能在需要的时候实现共享（Sharing）。&lt;/li&gt;
&lt;li&gt;Security 或者 Permission System 或者是 Access Control System（权限系统或者门禁系统）。&lt;/li&gt;
&lt;li&gt;不阻止应用程序获得高性能，甚至需要帮助应用程序获得高性能（Performance）。&lt;/li&gt;
&lt;li&gt;同一个操作系统需要能够支持大量不同的用户场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kernel 中的服务：文件系统，进程管理系统。&lt;/li&gt;
&lt;li&gt;系统调用与程序中的函数调用的区别是系统调用会实际运行到系统内核中，并执行内核中对于系统调用的实现。Kernel 会有特殊的权限能直接访问各种各样的硬件，例如磁盘。而普通的用户程序是没有办法直接访问这些硬件的。&lt;/li&gt;
&lt;li&gt;构建操作系统时，在操作系统下面就是硬件，编程环境比较恶劣。1. 高效易用 — 接近硬件底层，为应用程序提供抽象的高层的可移植接口。2. 要提供一个简单的接口，同时又包含了强大的功能。3. 需要内核具备灵活的接口，又需要在某种程度上限制应用程序，因为你会想要安全性。我们希望给程序员完全的自由，但是实际上又不能是真正的完全自由。&lt;/li&gt;
&lt;li&gt;fork 还会拷贝文件描述符表单。两个进程的指令是一样的，数据是一样的，栈是一样的，同时，两个进程又有各自独立的地址空间，它们都认为自己的内存从 0 开始增长，但这里是不同的内存。有一些细节偶尔会导致父子进程不一致。子进程 fork () 返回 0, 父进程返回子进程进程号。子进程不会从 main () 函数开始执行，而是直接从 fork () 系统调用返回，就好像是他自己调用了 fork。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec(&amp;quot;filename&amp;quot;，argv)&lt;/code&gt;  从指定的文件中读取并加载指令，并替代当前调用进程的指令。会保留当前的文件描述符表单，通常来说 exec 系统调用不会返回，除非调用出错返回 - 1。&lt;/li&gt;
&lt;li&gt;Shell 会执行 fork，之后 fork 出的子进程再调用 exec5 系统调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fork()&lt;/code&gt;  的子进程用 &lt;code&gt;exit(num)&lt;/code&gt;  退出后，在父进程中可以用 &lt;code&gt;wait(&amp;amp;status)&lt;/code&gt;  来获取子进程的退出状态。wait () 的返回值是子进程号， &lt;code&gt;status&lt;/code&gt;  的值即是子进程 &lt;code&gt;exit()&lt;/code&gt;  的参数的值。&lt;/li&gt;
&lt;li&gt;如果没有子进程的进程调用了 wait，wait 会立即返回 - 1，表明出现错误了。没有直接的方法让子进程等待父进程退出。&lt;/li&gt;
&lt;li&gt;如果一个进程调用 fork 两次，如果它想要等两个子进程都退出，它需要调用 wait 两次。每个 wait 会在一个子进程退出时立即返回。当 wait 返回时，你实际上没有必要知道哪个子进程退出了，但是 wait 返回了子进程的进程号，所以在 wait 返回之后，你就可以知道是哪个子进程退出了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int fd[2]; pipe(fd)&lt;/code&gt;  创建管道， &lt;code&gt;fd[0]&lt;/code&gt;  用来从管道读数据， &lt;code&gt;fd[1]&lt;/code&gt;  用来向管道写数据。返回 0 代表成功，返回 - 1 失败。管道是不是文件取决于操作系统创建管道的方式，一般来说用 pipe () 创建的管道都不是文件。而创建基于文件的管道，通常叫做有名管道或 FIFO 文件（先进先出文件）。两个进程只要知道管道的名字也能用它来通信，即使它们是非父子进程关系。如果试图读取一个空的管道，也不会发生错误，因为程序会等待管道中出现东西。当子进程结束时，管道会关闭。f &lt;code&gt;gets()&lt;/code&gt;  将会收到 &lt;code&gt;EOF&lt;/code&gt;  (End Of File, 文件结束符） ，于是 &lt;code&gt;fgets()&lt;/code&gt;  函数返回 0，循环就结束了。管道只能单向通信。但是可以通过创建两个管道，一个从父进程连接到子进程，另一个从子进程连接到父进程来实现双向通信 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;课程第三节-指导书第三章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课程第三节-指导书第三章&#34;&gt;#&lt;/a&gt; 课程第三节 &amp;amp;&amp;amp; 指导书第三章&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;需要操作系统的隔离性，保证应用程序间不会相互影响。需要操作系统抽象硬件资源，不让应用程序看到硬件资源。一个应用程序不能长时间占用 CPU, 需要协同调度，如果没有操作系统，这很难。从内存的角度来说，如果应用程序直接运行在硬件资源之上，那么每个应用程序的文本，代码和数据都直接保存在物理内存中。这可能会导致一个程序越界操作另一个程序的内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fork 创建了进程。进程本身不是 CPU，但是它们对应了 CPU，它们使得你可以在 CPU 上运行计算任务。应用程序不能直接与 CPU 交互，只能与进程交互。操作系统内核会完成不同进程在 CPU 上的切换。所以，&lt;strong&gt;操作系统不是直接将 CPU 提供给应用程序，而是向应用程序提供 “进程”，进程抽象了 CPU，这样操作系统才能在多个应用程序之间复用一个或者多个 CPU。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理器有几个核，就可以同时运行几个进程，但可以分时复用 CPU，比如一个进程用 100ms , 之后，另一个进程用 100ms。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们可以认为 exec 抽象了内存。当我们在执行 exec 系统调用的时候，我们会传入一个文件名，而这个文件名对应了一个应用程序的内存镜像。内存镜像里面包括了程序对应的指令，全局的数据。应用程序可以逐渐扩展自己的内存，但是&lt;strong&gt;应用程序并没有直接访问物理内存的权限&lt;/strong&gt;，例如&lt;strong&gt;应用程序不能直接访问物理内存&lt;/strong&gt;的 1000-2000 这段地址。不能直接访问的原因是，操作系统会提供内存隔离并控制内存，操作系统会在应用程序和硬件资源之间提供一个中间层。exec 是这样一种系统调用，它表明了应用程序不能直接访问物理内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;files 基本上来说抽象了磁盘。&lt;strong&gt;应用程序不会直接读写挂在计算机上的磁盘本身&lt;/strong&gt;，并且在 Unix 中这也是不被允许的。在 Unix 中，与存储系统交互的唯一方式就是通过 files。Files 提供了非常方便的磁盘抽象，你可以对文件命名，读写文件等等。之后，&lt;strong&gt;操作系统会决定如何将文件与磁盘中的块对应，确保一个磁盘块只出现在一个文件中，并且确保用户 A 不能操作用户 B 的文件&lt;/strong&gt;。通过 files 的抽象，可以&lt;strong&gt;实现不同用户之间和同一个用户的不同进程之间的文件强隔离。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统应该具有防御性（Defensive），能够应对恶意的应用程序，阻止其控制内核。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬件对于强隔离的支持包括：user/kernle mode 和虚拟内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;user/kertnle mode&lt;/code&gt; （用户态和内核态）是处理器的两种操作模式（还有第三种机器模式，主要用于配置计算机），运行在 &lt;code&gt;kernel mode&lt;/code&gt;  时，CPU 可以运行特定权限的指令（privileged instructions）；当运行在 &lt;code&gt;user mode&lt;/code&gt;  时，CPU 只能运行普通权限的指令（unprivileged instructions）普通程序运行在 user mode，内核空间的程序运行在 kernel mode ,  操作系统位于内核空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;普通指令如寄存器相加减的 ADD , SUB , 跳转 JRC、BRANCH 等，所有程序都允许执行。特殊权限指令是一些直接操纵硬件的指令和设置保护的指令，只能被内核执行，列如：page table 寄存器，关闭时钟中断等。用户代码都会通过内核访问硬件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在处理器里面有一个 flag , 为 1 是 user mode，为 0 是 kernel mode。用户程序通过系统调用来切换到 kernel mode, 执行系统调用时会通过&lt;strong&gt; ECALL（处理器的一个指令）触发一个软中断&lt;/strong&gt;（software interrupt），软中断会查询操作系统预先设定的中断向量表，并执行&lt;strong&gt;中断处理程序&lt;/strong&gt;。中断处理程序在内核中，这样就完成了 user mode 到 kernel mode 的切换，并执行用户程序想要执行的特殊权限指令，内核会检查并判断是否允许应用执行系统调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BIOS 是一段计算机自带的代码，它会先启动，之后它会启动操作系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统会给每个进程设置一个他自己独有的 &lt;code&gt; page table&lt;/code&gt;  页表（首先是指令，然后是全局变量，然后是栈区，每个进程有两个栈区：一个用户栈区和一个内核栈区，最后是一个堆区域）来映射一块和其他进程不重合的物理内存。两个正在运行的进程都有内存地址 0 , 但并不是同一个物理内存地址，而是映射到不同的物理内存地址。这样就给了我们内存的强隔离性。C 让你得到更多对于硬件资源的底层控制能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内中的操作系统代码越多，Bug 越多。让整个操作系统代码都运行在 kernel mode 中称为&lt;strong&gt; Monolithic Kernel Design（宏内核）&lt;/strong&gt;，缺点是容易出 Bug，优点是每个模块都在一个程序中，紧密集成，可以提供良好的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量减少内核中的代码，被称为&lt;strong&gt; Micro Kernel Design（微内核）&lt;/strong&gt;，将操作系统的大部分代码运行在内核之外，作为普通的用户程序来运行（比如文件系统），这意味着更少的 Bug , 问题是，这会出现&lt;strong&gt;两次用户空间 &amp;lt;-&amp;gt; 内核空间的切换&lt;/strong&gt;，比如：shell 通过内核中的&lt;strong&gt; IPC 系统&lt;/strong&gt;（进程间通信系统：管道，FIFO , 消息队列，信号量，共享内存。这里是消息队列）发送一条消息，内核查看后把消息发给文件系统，文件系统完成工作后发回给 IPC 系统结果，IPC 系统再将消息发给 shell。性能更差，而且 page cache 被隔开了，不好共享。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核编译过程：Makefile 会读取一个&lt;strong&gt; C 文件&lt;/strong&gt;（pro.c）；之后调用 gcc 编译器，生成一个&lt;strong&gt;汇编语言文件&lt;/strong&gt;（proc.s）；之后走到汇编解释器，生成&lt;strong&gt;汇编语言的二进制格式&lt;/strong&gt;（proc.c）。对所有内核文件都做相同的操作。之后系统加载器（Loadee）会将所有的.o 文件&lt;strong&gt;链接&lt;/strong&gt;在一起，并生成&lt;strong&gt;内核文件&lt;/strong&gt;，就是在 QUME 中运行的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;QEMU 相当于模拟了一个计算机系统或者计算机主板，它仿真了 RISC-V 处理器，来运行 XV6 。QEMU 主循环中每个 CPU 核做一件事情：读取 4 或 8 字节的 RISC-V 指令；解释 RISC-V 指令，并止找出对应的操作码（op code）（ADD,SUB 之类）；在软件中执行相应的指令。它要维护寄存器状态。仿真普通权限指令和特殊权限指令。跑在 QEMU 上的代码和跑在真正的 RISC-V 处理器上是一样的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统必须满足三个要求：&lt;strong&gt;多路复用、隔离和交互&lt;/strong&gt;。多路复用要求可以运行比处理器数量更多的进程；隔离要求进程间互不影响，交互又要求进程间可以交互。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RISC-V 指令（用户和内核指令）使用的是虚拟地址，而机器的 RAM 或物理内存是由物理地址索引的，RISC-V 页表硬件通过将每个虚拟地址映射的物理地址来为这两种地址建立联系。RISC-V 页表在逻辑上是一个页表（ Page Table Entries/PTE）条目组成的数组（数组中含有 PPN 和一些标识位 Flags），如下图，通过虚拟地址寻找页表数组中的 PPN，再加上原虚拟地址中的后十二位组成一个物理虚拟地址。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;/home/origin/Code/repository/Note/All_picture/6.s081_note/p1-1669426857667-10.png&amp;quot; alt=&amp;quot;img&amp;quot; style=&amp;quot;zoom: 67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;实际的转换分为三个步骤，页表以三级树形结构存储在物理内存中。页硬件使用 27 位中的前 9 位在根页表页面中选择 PTE，中间 9 位在树的下一级页表页面中选择 PTE，最后 9 位选择最终的 PTE。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;/home/origin/Code/repository/Note/All_picture/6.s081_note/p2.png&amp;quot; alt=&amp;quot;img&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;如果转换地址所需的三个 PTE 中的任何一个不存在，页式硬件就会引发页面故障异常（page-fault exception），并让内核来处理该异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Xv6 为每个进程维护一个页表来描述每个进程的用户地址空间，外加一个单独描述内核地址空间的页表。Xv6 物理起始地址是 0X80000000 , 内核通过读写这个地址以下的物理地址与设备交互。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="笔记" scheme="http://yuanmxc.site/categories/note/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E7%AC%94%E8%AE%B0/CMake%E5%AD%A6%E4%B9%A0/</id>
        <title>CMake学习</title>
        <link rel="alternate" href="http://yuanmxc.site/%E7%AC%94%E8%AE%B0/CMake%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h2 id=&#34;不引入第三方库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不引入第三方库&#34;&gt;#&lt;/a&gt; 不引入第三方库&lt;/h2&gt;
&lt;p&gt;目录结构：&lt;/p&gt;
&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;figcaption data-lang=&#34;markdown&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./Demo1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    |&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    +--- main.cc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    |&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    +--- math/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          |&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          +--- MathFunctions.cc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          |&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          +--- MathFunctions.h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;需要在项目根目录 Demo1 和 math 目录里各编写一个 CMakeLists.txt 文件。将 math 目录里的文件编译成静态库再由 main 函数调用。&lt;/p&gt;
&lt;p&gt;math 目录中的 CMakeLists.txt：&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;figcaption data-lang=&#34;CMake&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查找当前目录下的所有源文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 并将名称保存到 DIR_LIB_SRCS 变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;aux_source_directory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;. DIR_LIB_SRCS&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 生成静态链接库 MathFunctions&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;add_library&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;MathFunctions &lt;span class=&#34;token punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;DIR_LIB_SRCS&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;根目录中的 CMakeLists.txt ：&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;figcaption data-lang=&#34;CMake&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# CMake 最低版本号要求&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;cmake_minimum_required&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;VERSION&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2.8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 项目名称信息，同时会自动生成 PROJECT_NAME 变量，使用 $&amp;#123;PROJECT_NAME&amp;#125; 即可访问到 Demo1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;project&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Demo1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查找当前目录下的所有源文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 并将名称保存到 DIR_SRCS 变量，使用 $&amp;#123;DIR_SRCS&amp;#125; 可访问到&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;aux_source_directory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;. DIR_SRCS&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 添加 math 子目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;add_subdirectory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;math&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 指定生成目标 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;add_executable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Demo main.cc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 添加链接库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;target_link_libraries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Demo MathFunctions&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;单独命令：&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;figcaption data-lang=&#34;CMake&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将从第二个往后的参数保存到 DIR_SRCS 变量中，使用 $&amp;#123;DIR_SRCS&amp;#125; 可以访问到&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;DIR_SRCS&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    MathFunctions.cc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    main.cc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;引入第三方库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引入第三方库&#34;&gt;#&lt;/a&gt; 引入第三方库&lt;/h2&gt;
&lt;h3 id=&#34;目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录结构&#34;&gt;#&lt;/a&gt; 目录结构：&lt;/h3&gt;
&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;figcaption data-lang=&#34;markdown&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── CMakeLists.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;├── main.cpp&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;└── README.adoc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;本地导入find_package&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地导入find_package&#34;&gt;#&lt;/a&gt; 本地导入（find_package）&lt;/h3&gt;
&lt;p&gt;以 boost 为例，MakeLists.txt：&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;figcaption data-lang=&#34;CMake&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;cmake_minimum_required&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;VERSION&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;project&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;third_party_include&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 使用库文件系统和系统查找 Boost，找到了，Boost_FOUND 为真，否则为假&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;find_package&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Boost &lt;span class=&#34;token number&#34;&gt;1.46.1&lt;/span&gt; REQUIRED COMPONENTS filesystem system&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1.46.1 代表需要库的最低版本；REQUIRED 表示找不到会报错；COMPONENTS 用于检测该库的对应组件是否存在，如果不存在则认为找到的库不满足条件。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Boost_FOUND&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;boost found&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;FATAL_ERROR &lt;span class=&#34;token string&#34;&gt;&#34;Cannot find Boost&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;endif&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 指定生成目标&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;add_executable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;third_party_include main.cpp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 添加链接库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;target_link_libraries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;third_party_include &lt;span class=&#34;token namespace&#34;&gt;PRIVATE&lt;/span&gt; &lt;span class=&#34;token inserted class-name&#34;&gt;Boost::filesystem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里使用  &lt;code&gt;find_package&lt;/code&gt;  命令来在本地搜索对应的第三方库，Boost 代表需要查询的库名称；1.46.1 代表需要库的最低版本；REQUIRED 表示该库是必须的，如果找不到会报错；COMPONENTS 用于检测该库的对应组件是否存在，如果不存在则认为找到的库不满足条件。&lt;/p&gt;
&lt;h3 id=&#34;外部导入fetchcontent&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部导入fetchcontent&#34;&gt;#&lt;/a&gt; 外部导入（FetchContent）&lt;/h3&gt;
&lt;p&gt;以 GoogleTest 库为例：&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;figcaption data-lang=&#34;CMake&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;cmake_minimum_required&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;VERSION&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;my_project&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;CMAKE_CXX_STANDARD&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 引入 FetchContent 模块&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;FetchContent&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 获取第三方库，可以是一个 URL 或者一个 Git 仓库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;FetchContent_Declare&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  googletest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  URL https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将这个第三方库引入项目&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;FetchContent_MakeAvailable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;googletest&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="笔记" scheme="http://yuanmxc.site/categories/note/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E7%AC%94%E8%AE%B0/Csapp_note/</id>
        <title>Csapp_note</title>
        <link rel="alternate" href="http://yuanmxc.site/%E7%AC%94%E8%AE%B0/Csapp_note/"/>
        <content type="html">&lt;h2 id=&#34;第一章计算机系统漫游&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章计算机系统漫游&#34;&gt;#&lt;/a&gt; 第一章：计算机系统漫游&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;硬件：CPU，寄存器文件，高速缓存存储器，系统总线，主存，磁盘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统管理硬件。进程（处理器，主存，i/o 设备），虚拟内存（主存，i/o 设备），文件（i/o 设备）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并发运行：一个进程的指令和另一个进程的指令交错执行。这种交错执行的机制叫上下文切换，进程间切换由内核管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上下文：操作系统保持跟踪进程运行所需的所有状态信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核：操作系统代码常驻主存的一部分，不是独立的进程。是系统全部进程所用代码和数据结构的集合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈位于用户虚拟地址空间顶部，编译器用它来实现函数调用，和堆一样，用户栈在程序执行期间可以动态地扩展和收缩 。 调用函数时，栈会增长；从一个函数返回时，栈会收缩 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核虚拟内存：程序无法读写，或调用内核代码定义的函数，需要调用内核来执行操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PC：程序计数器（寄存器），ALU（算数 / 逻辑单元）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="笔记" scheme="http://yuanmxc.site/categories/note/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E7%AC%94%E8%AE%B0/Git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
        <title>Git使用笔记</title>
        <link rel="alternate" href="http://yuanmxc.site/%E7%AC%94%E8%AE%B0/Git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;p&gt;远程仓库指 github 仓库（repositoris），本地仓库指自己被 git 管理的文件夹（含有.git 文件夹）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;重新与远程仓库建立联系，并可以提交代码（自己远程仓库有代码，本地无代码，比如重装系统或者换电脑）：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果只是本地没有了仓库，在与远程仓库建立链接时提示” 远程 origin 已存在 &amp;quot;，可以直接 commit+push。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 克隆远程仓库到本地仓库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone git@github.com:username/repository_name.git&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;远程仓库地址ssh）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# cd 进本地仓库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; 仓库&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 初始化 git&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 与远程仓库建立链接（关联远程仓库，远程仓库名字叫 origin）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; origin git@github.com:username/repository_name.git&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;远程仓库地址ssh&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 获取远程更新&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; fetch origin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 把更新的内容合并到本地分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; merge origin/main&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 对代码进行一些修改&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;...&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin main&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个新的仓库：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 首先在 github 上创建一个空仓库（之后其实就可以看到教程了）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建一个 README.md 文件，并写入 &#34;# test&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;# test&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; README.md &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 初始化.git 文件夹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将刚刚创建的 README.md 文件加入 git 管理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; README.md &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建一个提交（即刚刚 README.md 文件的变化）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;first commit&#34;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建分支 main 作为默认分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch &lt;span class=&#34;token parameter variable&#34;&gt;-M&lt;/span&gt; main&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 与远程仓库建立连接，远程仓库的名字默认是 origin（可换）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; origin git@github.com:username/repository_name.git（远程仓库地址ssh）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将提交推送到远程仓库（-u 是指第一次提交）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push &lt;span class=&#34;token parameter variable&#34;&gt;-u&lt;/span&gt; origin main&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把本地的仓库提交到一个新建立的远程仓库（即远程仓库为空，本地已经有了一个包含.git 文件的仓库，希望不改变内容，将本地仓库推送到远程并关联）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 与远程仓库建立连接（关联）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; origin git@github.com:username/repository_name.git（远程仓库地址ssh）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 与远程仓库建立连接，远程仓库的名字默认是 origin（可换）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch &lt;span class=&#34;token parameter variable&#34;&gt;-M&lt;/span&gt; main&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将提交推送到远程仓库（-u 是指第一次提交）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push &lt;span class=&#34;token parameter variable&#34;&gt;-u&lt;/span&gt; origin &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;分支名&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;远程 origin/upstream 已存在：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查看远程配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 删除远程配置  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;远程仓库名&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;     （一般是origin或者upstream）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 更改远程配置（可以直接修改，不需要上一步的删除）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote set-url upstream &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;upstream的新地址&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fatal: 拒绝合并无关的历史：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 需要将远程仓库和本地仓库关联起来：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch --set-upstream-to&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;origin/main main&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 然后使用 git pull 整合远程仓库和本地仓库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; pull --allow-unrelated-histories&lt;span class=&#34;token comment&#34;&gt;# 忽略版本不同造成的影响&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何给开源社区提交 PR&lt;/p&gt;
&lt;p&gt;假设官方 GitHub 名叫 [officialName]，你的 GitHub 名叫 [yourName]，GitHub 仓库名字叫 [repository]。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;网页操作：在官 C 语言代码方 GitHub 仓库 fork 一个相同的仓库到你的 GitHub.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在你的仓库复制代码地址 [your code SSH/HTTPS]，在官方仓库复制代码地址 [official code SSH/HTTPS]，然后&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 克隆你 GitHub 仓库到本地&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;your code SSH/HTTPS&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 添加官方仓库地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; upstream &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;official code SSH/HTTPS&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 检查仓库的远程信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 远程信息输出应为：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;origin  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;your code SSH/HTTPS&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;origin  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;your code SSH/HTTPS&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;upstream        &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;official code SSH/HTTPS&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;upstream        &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;official code SSH/HTTPS&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;fetch 和 push 分别代表你在 fetch（拉取）和 push（推送）的 GitHub 仓库的地址，origin 代表你的 GitHub 仓库，upstream 代表官方的 GitHub 仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 从 upstream 中获取最新的代码下载到本地，但是不会自动合并到本地分支中。一般和下面第二个命令一起使用。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; fetch upstream&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将 upstream 的 master 分支合并到当前本地分支中，如果有冲突需要手动解决（本地分支的代码就与 upstream 的 master 分支保持同步）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; merge upstream/master&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建并切换到名为 fixBug 的新分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout &lt;span class=&#34;token parameter variable&#34;&gt;-b&lt;/span&gt; fixBug&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将当前分支 fixBug 推送到远程仓库 origin 上，并将本地分支和远程分支关联起来。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push &lt;span class=&#34;token parameter variable&#34;&gt;-u&lt;/span&gt; origin fixBug&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之后，你可以在 fixBug 分支上进行一些修改，然后通过一下步骤将修改好的代码 push 到 GitHub 仓库的对应分支。&lt;/p&gt;
&lt;p&gt;当你需要切换分支时，你必须 commit 当前的代码。&lt;/p&gt;
&lt;p&gt;你的每一次 comiit 都会有所记录，当你 push 后，会把所有的 commit 都交上去，如果你 commit 的文件涉及到一个 pr，那么 pr 中也会有所修改，记录你的 commit。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查看修改了那些文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; status&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查看修改内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;diff&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# add 提交&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# commit 提交（如果官方仓需要 Signed-off-by 检查的就带账号邮箱信息）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;xxxxx&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将过去的 n 个 commit 合并为一个 commit（等待尝试）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; rebase &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; HEAD~n &lt;span class=&#34;token comment&#34;&gt;# 打开一个编辑器，将第二行开始的每一行的第一个单词从 pick 改为 squash。然后保存文件并退出。另一个编辑器会打开，在这里修改最终的提交信息。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将本次提交合并到上一次提交，如果你上一次提交已经 push 过，需要使用 --force 或者 --force-with-lease 选项来强制推送。可能会覆盖其他人在远程仓库上做的修改，谨慎使用。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;--amend&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 会打开一个编辑器，让你修改提交信息。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# push 到远程仓&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时，你的 GitHub 仓库的 fixBug 分支的代码已经发生了变化，在 Pull requests 界面你可以找到提交 PR 的方法，然后就就可以按照社区要去提供代码了。对于本地的代码，一旦你创建分支之后，master 和 fixBug 就是两份代码了，你在 fixBug 的修改并不会影响到 master 的的代码。你可以通过 &lt;code&gt;git checkout [分支名]&lt;/code&gt;  来切换到你想要的分支。你可以创建多个分支来确保工作的顺利进行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他有用的命令&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 分支操作：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查看所有分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; bC语言代码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ranch（*代表当前所在分支）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 删除分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;branchName&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;-d换为-D强制删除&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 更改分支名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;oldName&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;newName&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 从远程仓库 upstream 拉取代码（获取最新的代码，但不会将其合并到本地）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; fetch upstream&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 从远程仓库 origin 拉取代码（获取最新的代码，但不会将其合并到本地）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; fetch origin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 比较本地仓库当前的分支 HEAD 和 upstream/master 分支之间的差异&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;diff&lt;/span&gt; HEAD upstream/master&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 显示本地的 commit 历史版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; log &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 根据 commit 历史版本号，可以进行版本回退&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;版本号&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将本地分支重置为最新拉取的 upstream 仓库的版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset &lt;span class=&#34;token parameter variable&#34;&gt;--hard&lt;/span&gt; upstream/&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;upstream_branch_name&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将本地分支重置为 oorigin 仓库的版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset &lt;span class=&#34;token parameter variable&#34;&gt;--hard&lt;/span&gt; origin/&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;origin_branch_name&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 将本地仓库的更改推送到 origin（-f 选项强制推送更改，这将覆盖 origin 仓库中的所有更改）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; origin &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;local_branch_name&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 删除本地未跟踪的目录和文件（d 和 f 分别指目录和文件）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clean &lt;span class=&#34;token parameter variable&#34;&gt;-df&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 从 origin 指定的 (自己的）GitHub 仓库拉取代码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; fetch origin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="笔记" scheme="http://yuanmxc.site/categories/note/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E7%AC%94%E8%AE%B0/Linux_coding/</id>
        <title>Linux_coding</title>
        <link rel="alternate" href="http://yuanmxc.site/%E7%AC%94%E8%AE%B0/Linux_coding/"/>
        <content type="html">&lt;h2 id=&#34;目录文件相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录文件相关&#34;&gt;#&lt;/a&gt; 目录 / 文件相关&lt;/h2&gt;
&lt;h3 id=&#34;存储信息的结构体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储信息的结构体&#34;&gt;#&lt;/a&gt; 存储信息的结构体：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DIR* dp&lt;/code&gt; : &lt;strong&gt;某个目录的信息&lt;/strong&gt; (opendir 返回，做 readir 参数)&lt;/p&gt;
&lt;p&gt;头文件： &lt;code&gt;dirent.h&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;__dirstream&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;__fd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;token comment&#34;&gt;// 文件描述符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;__data&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                 &lt;span class=&#34;token comment&#34;&gt;// 目录块&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; __entry_data&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;token comment&#34;&gt;//data 对应的条目号   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;__ptr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                  &lt;span class=&#34;token comment&#34;&gt;// 块中的当前指针&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; __entry_ptr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// 条目号对应的指针  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; __allocation&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;          &lt;span class=&#34;token comment&#34;&gt;// 为块分配的空间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; __size&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                &lt;span class=&#34;token comment&#34;&gt;// 块中的总有效数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;__libc_lock_define&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; __lock&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 此结构的互斥锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;__dirstream&lt;/span&gt; DIR&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;struct dirent *entry&lt;/code&gt; : &lt;strong&gt;某个文件在目录里的简略信息&lt;/strong&gt; (readir 返回)&lt;/p&gt;
&lt;p&gt;头文件： &lt;code&gt;dirent.h&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;dirent&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    __ino_t d_ino&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// 文件的 inode 节点号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    __off_t d_off&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// 在目录文件中的偏移&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;short&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; d_reclen&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 文件名字长度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; d_type&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// 文件类型 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; d_name&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;		    &lt;span class=&#34;token comment&#34;&gt;// 文件名字 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;stat&lt;/code&gt;  结构体 : &lt;strong&gt;某个文件的详细信息&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;stat&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;mode_t&lt;/span&gt; st_mode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// 文件类型、访问权限   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ino_t&lt;/span&gt; st_ino&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 索引节点号   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;dev_t&lt;/span&gt; st_dev&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 文件使用的设备号   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;dev_t&lt;/span&gt; st_rdev&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// 设备文件的设备号   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;nlink_t&lt;/span&gt; st_nlink&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// 文件的硬连接数    &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uid_t&lt;/span&gt; st_uid&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 所有者用户识别号   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;gid_t&lt;/span&gt; st_gid&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 组识别号   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;off_t&lt;/span&gt; st_size&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// 以字节为单位的文件容量   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;time_t&lt;/span&gt; st_atime&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 最后一次访问该文件的时间   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;time_t&lt;/span&gt; st_mtime&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 最后一次修改该文件的时间   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;time_t&lt;/span&gt; st_ctime&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 最后一次改变该文件状态的时间   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;blksize_t&lt;/span&gt; st_blksize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 文件内容所占的磁盘块的大小   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;blkcnt_t&lt;/span&gt; st_blocks&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 文件内容所占的磁盘块的数量  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;相关函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关函数&#34;&gt;#&lt;/a&gt; 相关函数：&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chdir()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用途： &lt;code&gt;int chdir(const char * path)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;切换到参数指定的目录，成功返回 0 , 失败返回 - 1 , 置 errno&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getcwd()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;unistd.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getcwd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;buf&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用途：将当前目录的绝对路径拷贝到参数 &lt;code&gt;buffer&lt;/code&gt;  所指的空间，参数 &lt;code&gt;size&lt;/code&gt;  为 &lt;code&gt;buf&lt;/code&gt;  所指的空间大小。 &lt;code&gt;bu&lt;/code&gt; f 为 &lt;code&gt;NULL&lt;/code&gt; ， &lt;code&gt;size&lt;/code&gt;  为 0 时， &lt;code&gt;getcwd&lt;/code&gt;  调用 &lt;code&gt;malloc&lt;/code&gt;  来动态分配内存一个空间存储绝对路径，返回指向这个空间的指针，此时要注意后面释放 &lt;code&gt;buf&lt;/code&gt;  内存，防止内存泄漏。成功返回指向绝对路径的指针，失败返回 &lt;code&gt;NULL&lt;/code&gt; ，置 &lt;code&gt;errno&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mkdir()&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/types.h&gt;&lt;/span&gt; &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/stat.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;pathname&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;mode_t&lt;/span&gt; mode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用途：在当前目录下按照 mode 指定的权限创建名为 &lt;code&gt;pathname&lt;/code&gt;  的目录，成功返回 0，失败返回 - 1，置 &lt;code&gt;errno&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;mode 简述（不全）：使用掩码，后三位数字从左往右依次表示文件所有者权限、用户组权限、其他用户权限。1：只执行，2：只写入，4：只可读，7：读、写、执行，3：执行 + 写，5：读 + 执行，依次类推。可以只写后三位数字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rmdir()&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;unistd.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rmdir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;pathname&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用途：在当前目录下删除名为 &lt;code&gt;pathname&lt;/code&gt;  的空目录，成功返回 0，失败返回 - 1，置 &lt;code&gt;errno&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;opendir()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/types.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;dirent.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DIR &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;opendir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DIR &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fdopendir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用途：打开参数 name 或 fd 指定的目录，创建一个目录流。成功返回一个 &lt;code&gt;DIR&lt;/code&gt;  指针，失败返回 &lt;code&gt;NULL&lt;/code&gt; ，置 &lt;code&gt;errno&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;readdir()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;include &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;dirent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;h&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;dirent&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readdir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;DIR &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;dirp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用途：读取参数 dirp 指定的目录流，成功返回指向目录内当前偏移量指向的文件的简略信息的 &lt;code&gt;dirent&lt;/code&gt;  结构指针，失败或者到达目录尾则返回 &lt;code&gt;NULL&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;closedir()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/types.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;dirent.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;closedir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;DIR &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;dirp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用途：关闭参数 dirp 指定的目录流，成功返回 0，失败返回 - 1，置 ereno&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;stat() fstat() lstat()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;sys/stat.h&gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;unistd.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;stat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;stat&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;struct_stat&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;lstat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;stat&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;struct_stat&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fstat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fdp&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;stat&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;struct_stat&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用途：通过文件名 path 或者文件描述符 fdp 获取文件详细信息，将信息保存在 struct_stat 结构体中，成功返回 0, 失败返回 - 1 并，置 errno。&lt;/p&gt;
&lt;p&gt;区别：stat 没有处理字符链接 (软链接）的能力，如果一个文件是符号链接 (软链接)，stat 会直接返回它所指向的文件的属性；而 lstat 返回的就是这个符号链接的内容。目录在 linux 中也是一个文件，文件的内容就是这这个目录下面所有文件与 inode 的对应关系。硬链接就是在某一个目录下面将一个文件名与一个 inode 关联起来，就是添加一条记录。软链接也叫符号链接，这个文件的内容就是一个字符串，这个字符串就是它所链接的文件的绝对或者相对地址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="笔记" scheme="http://yuanmxc.site/categories/note/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
    <entry>
        <id>http://yuanmxc.site/%E7%AC%94%E8%AE%B0/%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%82%B9/</id>
        <title>知识小点</title>
        <link rel="alternate" href="http://yuanmxc.site/%E7%AC%94%E8%AE%B0/%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%82%B9/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;辅助理解递归：明确这个函数是做什么的，然后在这个函数里有需要做这一步，比如按扩展先序创建二叉树，函数作用为：“创建输入节点的子树，先左子树，后右子树”。然后创建左右子树的时候是递归调用。&lt;/li&gt;
&lt;li&gt;管道和进程间通信，即 &lt;code&gt;pipe()&lt;/code&gt; + &lt;code&gt;fork()&lt;/code&gt;  的形式，注意关掉无用的文件文件描述符，否则会造成文件描述符的浪费，并且 fork () 后关闭比较麻烦。先 pipe ()，之后先把&lt;strong&gt;能立刻用完 **** 之后就不在用的符&lt;/strong&gt;立刻用完，然后将他们关掉，再 fork ()。因为子进程会继承父进程的文件描述符。例：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3h2Ni5kZ3Muem9uZS9sYWJzL3JlcXVpcmVtZW50cy9sYWIxLmh0bWw=&#34;&gt;MIT6.S081 lab 的第三个求 2-35 内的素数&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stidio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;is_primes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fd_father&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fd_child&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 该进程的子进程的管道读写符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_child&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 打印一定是素数的数（第一个写进来的数）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_father&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;prime %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 如果 n 是 p 的整数倍，那他一定不是素数，丢弃；否则，可能是素数，写给子进程。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 剩下几个数字没有判断。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_father&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_child&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            left&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_father&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_child&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;left &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 说明所有数都判断完了，为了避免最后一层还会执行后面的 fork, 避免出现多个 0.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 上面同理，先把自己进程的读端和子进程的写端用完，关掉，再开子进程。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fork&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 该进程的子进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;is_primes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_child&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 子进程读取父进程进程写进来数字，并判断是否为素数：可能是素数的，写给孙进程然后递归调用，一定不是素数的，丢弃。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; argc&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; atgv&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; fd_child&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 子进程的管道读写端&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_child&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 先把数字写进子进程管道，并关掉写端。存存储器，系统总线，主存，磁盘。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;操作系统管理硬件。进程（处理器，主存，i&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;o设备），虚拟内存（主存，i&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;o设备），文件（i&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;o设备）。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;并发运行：一个进程的指令和另一个进程的指令交错执行。这种交错执行的机制叫上下文切换，进程间切换由内核管理。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;上下文：操作系统保持跟踪进程运行所需的所有状态信息。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;内核：操作系统代码常驻主存的一部分，不是独立的进程。是系统全部进程所用代码和数据结构的集合。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;栈位于用户虚拟地址空间顶部，编译器用它来实现函数调用，和堆一样，用户栈在程序执行期间可以动态地扩展和收缩 。 调用函数时，栈会增长；从一个函数返回时，栈会收缩 。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;内核虚拟内存：程序无法读写，或调用内核代码定义的函数，需要调用内核来执行操作。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;img title&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt; src&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;file:///home/yuanye/图片/2022-10-06%2017-25-26%20的屏幕截图.png&#34;&lt;/span&gt; alt&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2022-10-06 17-25-26 的屏幕截图.png&#34;&lt;/span&gt; width&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;309&#34;&lt;/span&gt; data&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;align&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;center&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;PC：程序计数器（寄存器），ALU（算数&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;逻辑单元）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_child&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_child&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 创建子进程，只需要子进程的读端。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fork&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;is_primes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fd_child&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 子进程读取父进程进程写进来数字，并判断是否为素数：可能是素数的，写给孙进程然后递归调用，一定不是素数的，丢弃。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="笔记" scheme="http://yuanmxc.site/categories/note/" />
        <updated>2024-03-26T11:49:10.133Z</updated>
    </entry>
</feed>
